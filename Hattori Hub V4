
--[[
 __  __   ______   ______  ______  ______   ______   __    
/\ \_\ \ /\  __ \ /\__  _\/\__  _\/\  __ \ /\  == \ /\ \   
\ \  __ \\ \  __ \\/_/\ \/\/_/\ \/\ \ \/\ \\ \  __< \ \ \  
 \ \_\ \_\\ \_\ \_\  \ \_\   \ \_\ \ \_____\\ \_\ \_\\ \_\ 
  \/_/\/_/ \/_/\/_/   \/_/    \/_/  \/_____/ \/_/ /_/ \/_/ 
                                                           

    Hattori v4 by Phoenixx, Source Release
    Ui Library made by xMee


    Read through the code and learn from my mistakes, make fun of my shitty code, or even if you skid it,   i don't give a fuck
    If you do take the code or whatever, at least give credits

    -RIP Hattori 2020

]]









local codeWhenHopping = [[
    repeat wait() until game.Loaded;]]


local hasCalled = false
game:GetService("Players").LocalPlayer.OnTeleport:Connect(function(State)
    if State == Enum.TeleportState.Started and not hasCalled then
        syn.queue_on_teleport(codeWhenHopping)
    end
end)

wait()



local library = {
    toggled = true;
    binding = false;
    binds = {};
}

if getgenv and getgenv().hattUI then
    getgenv().hattUI:Destroy()
end

local HttpService = game:GetService("HttpService")
do
    local contentProvider = game:GetService("ContentProvider")
    local userInputService = game:GetService("UserInputService")
    local runService = game:GetService("RunService")

    contentProvider:PreloadAsync({
		"rbxassetid://5880691637";
		"rbxassetid://5882688826";
		"rbxassetid://4896743658";
		"rbxassetid://4894670678";
		"rbxassetid://4892761119";
		"rbxassetid://5880482965";
        "rbxassetid://4892463081";
        "rbxassetid://5882871047";
    })

    local originalSize
    local originalObjectY
    local originalContainerY
    local dynamicContainerBottomYPos

    local originalTabY
    local originalTabContainerY
    local dynamicTabContainerBottomYPos

    local tabList = {}
    local dropList = {}
    local main = {}
    main.__index = main
    local tabs = {}
    tabs.__index = tabs
    local labels = {}
    labels.__index = labels

    local function isInGui(frame)
        if not frame then return end

        local mouseLocation = userInputService:GetMouseLocation()
        local mouse = Vector2.new(mouseLocation.X, mouseLocation.Y - 36)

        local x1, x2 = frame.AbsolutePosition.X, frame.AbsolutePosition.X + frame.AbsoluteSize.X
        local y1, y2 = frame.AbsolutePosition.Y, frame.AbsolutePosition.Y + frame.AbsoluteSize.Y
        
        return (mouse.X >= x1 and mouse.X <= x2) and (mouse.Y >= y1 and mouse.Y <= y2)
    end

    function main:resize()
        local y = 0

        for i,v in pairs(self.container:GetChildren()) do
            if not v:IsA("UIListLayout") then
                y = y + v.AbsoluteSize.Y
            end
        end

        self.object.Size = UDim2.new(0, 180, 0, y + 57)
    end

    function main:getOrder()
        local count = 0

        for i,v in pairs(self.container:GetChildren()) do
            if not v:IsA("UIListLayout") then
                count = count + 1
            end
        end

        return count
    end

    function tabs:getOrder()
        local count = 0

        for i,v in pairs(self.container:GetChildren()) do
            if not v:IsA("UIListLayout") then
                count = count + 1
            end
        end

        return count
    end

    local m = game.Players.LocalPlayer:GetMouse()

    local function isHoveringOverObj(obj)
        local tx = obj.AbsolutePosition.X
        local ty = obj.AbsolutePosition.Y
        local bx = tx + obj.AbsoluteSize.X
        local by = ty + obj.AbsoluteSize.Y
        if m.X >= tx and m.Y >= ty and m.X <= bx and m.Y <= by then
            return true
        end
    end

    local function Resize(part,new,_delay)
        local TweenService = game:GetService("TweenService")
        _delay = _delay or 0.5
        local tweenInfo = TweenInfo.new(_delay, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        local tween = TweenService:Create(part, tweenInfo, new)
        tween:Play()
    end

    local function CreateDrag(gui)
        local UserInputService = game:GetService("UserInputService")
        local dragging
        local dragInput
        local dragStart
        local startPos
        
        local function update(input)
            local delta = input.Position - dragStart
            Resize(gui, {Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)}, 0.16)
        end
        
        gui.InputBegan:Connect(function(input)
            if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and isHoveringOverObj(gui.frame.topBorder) then
                dragging = true
                dragStart = input.Position
                startPos = gui.Position
                
                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        
        gui.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                dragInput = input
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                update(input)
            end
        end)
    end

    function main:window(name)
        local newWindow = library:createElement("ImageLabel", {
            Name = name;
            Size = UDim2.new(0, 180, 0, 50);
            Position = UDim2.new(0, 10, 0, 40);
            Image = "rbxassetid://4894670678";
            ImageColor3 = Color3.fromRGB(15, 15, 15);
            ImageTransparency = 0.5;
            ScaleType = Enum.ScaleType.Slice;
            SliceCenter = Rect.new(5, 5, 434, 297);
            BackgroundTransparency = 1;
            ClipsDescendants = true;
            library:createElement("ImageLabel", {
                Name = "frame";
                Size = UDim2.new(1, -2, 1, -2);
                Position = UDim2.new(0, 1, 0, 1);
                Image = "rbxassetid://4894670678";
                ImageColor3 = Color3.fromRGB(40, 40, 40);
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(5, 5, 454, 297);
                BackgroundTransparency = 1;
                library:createElement("ImageLabel", {
                    Name = "topBorder";
                    Size = UDim2.new(1, 0, 0, 35);
                    Position = UDim2.new(0, 0, 0, 0);
                    Image = "rbxassetid://4892463081";
                    ImageColor3 = Color3.fromRGB(50, 50, 50);
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(5, 5, 434, 125);
                    BackgroundTransparency = 1;
                    library:createElement("TextLabel", {
                        Name = "title";
                        Size = UDim2.new(0, 180, 0, 35);
                        Position = UDim2.new(0, 15, 0, 0);
                        Text = name;
                        TextWrapped = true;
                        TextXAlignment = Enum.TextXAlignment.Left;
                        TextColor3 = Color3.fromRGB(250, 250, 250);
                        Font = Enum.Font.GothamSemibold;
                        TextSize = 16;
                        BackgroundTransparency = 1;
                    });
                    library:createElement("ImageLabel", {
                        Name = "logo";
                        Size = UDim2.new(0, 24, 0, 20);
                        Position = UDim2.new(1, -30, 0, 7);
                        Image = "rbxassetid://5882871047";
                        BackgroundTransparency = 1;
                        ZIndex = 3;
                    });
                    library:createElement("Frame", {
                        Name = "line";
                        Size = UDim2.new(1, 0, 0, 2);
                        Position = UDim2.new(0, 0, 1, -2);
                        BorderSizePixel = 0;
                        BackgroundColor3 = Color3.fromRGB(35, 35, 35);
                    })
                })
            });
            library:createElement("ImageLabel", {
                Name = "containerBorder";
                Size = UDim2.new(0, 160, 1, -55);
                Position = UDim2.new(0, 10, 0, 45);
                Image = "rbxassetid://4894670678";
                ImageColor3 = Color3.fromRGB(33, 33, 33);
                ImageTransparency = 0;
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(5, 5, 434, 297);
                BackgroundTransparency = 1;
                ZIndex = 3;
                library:createElement("ImageLabel", {
                    Name = "Container";
                    Size = UDim2.new(1, -2, 1, -2);
                    Position = UDim2.new(0, 1, 0, 1);
                    Image = "rbxassetid://4894670678";
                    ImageColor3 = Color3.fromRGB(50, 50, 50);
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(5, 5, 434, 297);
                    BackgroundTransparency = 1;
                    ClipsDescendants = false;
                    ZIndex = 3;
                    library:createElement("UIListLayout", {
                        SortOrder = 2;
                        Name = "list";
                    })
                });
            });
            Parent = library.container;
        })
        CreateDrag(newWindow)

        local window = setmetatable({
            toggled = true;
            object = newWindow;
            container = newWindow.containerBorder.Container;
        }, main)

        return window
    end

    function main:newTab(name)
        local newTab = library:createElement("Frame", {
            Name = name;
            Size = UDim2.new(1, 0, 0, 35);
            BackgroundTransparency = 1;
            LayoutOrder = self:getOrder();
            ZIndex = 3;
            library:createElement("TextButton", {
                Name = "button";
                Size = UDim2.new(1, 0, 0, 25);
                Position = UDim2.new(0, 0, 0, 5);
                Text = "";
                AutoButtonColor = false;
                BackgroundTransparency = 1;
                ZIndex = 3;
                library:createElement("TextLabel", {
                    Name = "title";
                    Size = UDim2.new(1, -35, 1, 0);
                    Position = UDim2.new(0, 35, 0, 0);
                    BackgroundTransparency = 1;
                    Text = name;
                    TextColor3 = Color3.fromRGB(250, 250, 250);
                    TextXAlignment = Enum.TextXAlignment.Left;
                    Font = Enum.Font.GothamSemibold;
                    TextSize = 12;
                    ZIndex = 3;
                });
                library:createElement("ImageLabel", {
                    Name = "toggleOutline";
                    Size = UDim2.new(0, 20, 0, 20);
                    Position = UDim2.new(0, 5, 0, 5/2);
                    Image = "rbxassetid://4892761119";
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(6, 6, 14, 14);
                    BackgroundTransparency = 1;
                    ZIndex = 3;
                    library:createElement("ImageLabel", {
                        Name = "toggle";
                        Size = UDim2.new(0, 0, 0, 0);
                        Position = UDim2.new(0.5, 0, 0.5, 0);
                        Image = "rbxassetid://5880482965";
                        BackgroundTransparency = 1;
                        ZIndex = 3;
                    })
                })
            });
            Parent = self.container;
        })

        local container = library:createElement("Frame", {
            Name = "container";
            Size = UDim2.new(0, 200, 0, 0);
            Position = UDim2.new(0, 10, 0, 47);
            BorderSizePixel = 0;
            BackgroundTransparency = 1;
            ZIndex = 2;
            ClipsDescendants = true;
            library:createElement("UIListLayout", {
                Name = "list";
                SortOrder = 2;
            });
            Parent = self.object;
        })

        local tab = setmetatable({
            toggled = false;
            parentObject = self.object;
            parentContainer = self.container;
            object = newTab;
            container = container;
            check = newTab.button.toggleOutline.toggle;
            flags = {};
            spFuncs = {};
        }, tabs)
        table.insert(tabList, tab)

        local containerSizeY = 0

        function tab.spFuncs:SimClck()
            if tab.toggled == false then
                tab.toggled = not tab.toggled

                for i,v in pairs(dropList) do
                    if v.toggled then
                    
                        v.toggled = false
                        local frame = v.object.border.frame

                        if not v.usesToggles then
                            frame.label.TextTransparency = 0
                            frame.label.Text = v.l[v.f]
                        end

                        tab.parentObject:TweenSize(UDim2.new(0, tab.parentObject.AbsoluteSize.X, 0, originalTabY), "In", "Quad", 0.15, true)
                        v.container.Parent.Parent.Parent:TweenSize(UDim2.new(1, 0, 0, 0), "In", "Quad", 0.15, true)

                        v.arrow.Rotation = 0
                        wait(0.15)

                    end
                end
                
                for i,v in pairs(tabList) do
                    if v ~= tab and v.toggled then
                        spawn(function()
                            v.toggled = false
                            v.check:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 0.5, 0), "In", "Quad", 0.15, true)
                            v.container:TweenPosition(UDim2.new(0, 10, 0, 47), "In", "Quad", 0.15, true)
                            wait(0.15)

                            v.container.Size = UDim2.new(0, 200, 0, 0)
                        end)
                    end
                end

                if tab.toggled then
                    local y = 0

                    for i,v in pairs(tab.container:GetChildren()) do
                        if not v:IsA("UIListLayout") then
                            y = y + v.AbsoluteSize.Y
                        end
                    end

                    tab.check:TweenSizeAndPosition(UDim2.new(1, 0, 1, 0), UDim2.new(0, 0, 0, 0), "Out", "Elastic", 0.75, true)
                    tab.parentObject:TweenSize((y == 0 and originalSize) or (y <= originalContainerY and UDim2.new(0, 392, 0, originalObjectY)) or UDim2.new(0, 392, 0, (y + originalObjectY) - originalContainerY + 3), "Out", "Quad", 0.15, true)
                    spawn(function()
                        wait(0.15)
                    
                        if tab.toggled then
                    
                            tab.container.Size = UDim2.new(0, 200, 0, y)
                            tab.container:TweenPosition(UDim2.new(0, 180, 0, 47), "Out", "Quad", 0.15, true)
                            wait(0.15)

                            originalTabY = tab.parentObject.AbsoluteSize.Y
                            originalTabContainerY = tab.container.AbsoluteSize.Y
                            dynamicContainerBottomYPos = tab.parentContainer.AbsolutePosition.Y + tab.parentContainer.AbsoluteSize.Y
                            dynamicTabContainerBottomYPos = tab.container.AbsolutePosition.Y + tab.container.AbsoluteSize.Y

                        end
                    end)
                else
                    tab.check:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(0.5, 0, 0.5, 0), "In", "Quad", 0.15, true)
                    tab.container:TweenPosition(UDim2.new(0, 10, 0, 47), "In", "Quad", 0.15, true)
                    spawn(function()
                        wait(0.15)
                        
                        if tab.toggled then
                        
                            tab.container.Size = UDim2.new(0, 200, 0, 0)
                            tab.parentObject:TweenSize(originalSize, "In", "Quad", 0.15, true)

                        end
                    end)
                end
            end
        end

        newTab.button.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                spawn(function()
                    tab.spFuncs:SimClck()
                end)
            end
        end)

        self:resize()
        
        originalSize = UDim2.new(0, self.object.AbsoluteSize.X, 0, self.object.AbsoluteSize.Y)
        originalObjectY = self.object.AbsoluteSize.Y
        originalContainerY = self.container.AbsoluteSize.Y
        dynamicContainerBottomYPos = tab.parentContainer.AbsolutePosition.Y + tab.parentContainer.AbsoluteSize.Y
        dynamicTabContainerBottomYPos = tab.container.AbsolutePosition.Y + tab.container.AbsoluteSize.Y

        return tab
    end

    function tabs:label(name, text)
        local newLabel = library:createElement("Frame", {
            Name = name;
            Size = UDim2.new(0, 200, 0, 35);
            BackgroundTransparency = 1;
            LayoutOrder = self:getOrder();
            library:createElement("ImageLabel", {
                Name = "border";
                Size = UDim2.new(1, 0, 0, 26);
                Position = UDim2.new(0, 0, 0, 5);
                BackgroundTransparency = 1;
                Image = "rbxassetid://4894670678";
                ImageColor3 = Color3.fromRGB(225, 58, 75);
                ImageTransparency = 0.35;
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(5, 5, 434, 297);
                library:createElement("ImageButton", {
                    Name = "frame";
                    Size = UDim2.new(1, -2, 1, -2);
                    Position = UDim2.new(0, 1, 0, 1);
                    BackgroundTransparency = 1;
                    Image = "rbxassetid://4894670678";
                    ImageColor3 = Color3.fromRGB(50, 50, 50);
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(5, 5, 434, 297);
                    ClipsDescendants = true;
                    library:createElement("TextLabel", {
                        Name = "text";
                        Size = UDim2.new(1, -10, 1, -10);
                        Position = UDim2.new(0, 5, 0, 5);
                        Text = text;
                        TextColor3 = Color3.fromRGB(250, 250, 250);
                        TextSize = 12;
                        TextWrapped = true;
                        Font = Enum.Font.GothamSemibold;
                        BackgroundTransparency = 1;
                    });
                })
            });
            Parent = self.container;
        })

        local label = setmetatable({
            object = newLabel;
            tabObject = self.object;
            parentObject = self.parentObject;
            container = self.container;
            textBox = newLabel.border.frame.text;
        }, labels)

        while not label.textBox.TextFits do
            runService.RenderStepped:Wait()
            newLabel.Size = newLabel.Size + UDim2.new(0, 0, 0, 10);
            newLabel.border.Size = newLabel.border.Size + UDim2.new(0, 0, 0, 10)
        end

        return label
    end

    function labels:changeText(text)
        self.textBox.Text = text;

        local function getToggled()
            for i,v in pairs(tabList) do
                if self.tabObject == v.object then return v.toggled end
            end

            return false
        end

        if self.textBox.TextFits then
            while self.textBox.TextFits do
                runService.RenderStepped:Wait()

                if getToggled() then
                    self.parentObject.Size = self.parentObject.Size + UDim2.new(0, 0, 0, -10)
                    self.container.Size = self.container.Size + UDim2.new(0, 0, 0, -10)
                end

                self.object.Size = self.object.Size + UDim2.new(0, 0, 0, -10)
                self.object.border.Size = self.object.border.Size + UDim2.new(0, 0, 0, -10)
            end

            self.object.Size = self.object.Size + UDim2.new(0, 0, 0, 10)
            self.object.border.Size = self.object.border.Size + UDim2.new(0, 0, 0, 10)

            if getToggled() then
                self.parentObject.Size = self.parentObject.Size + UDim2.new(0, 0, 0, 10)
                self.container.Size = self.container.Size + UDim2.new(0, 0, 0, 10)
            end

        else
            while not self.textBox.TextFits do
                runService.RenderStepped:Wait()

                if getToggled() then
                    self.parentObject.Size = self.parentObject.Size + UDim2.new(0, 0, 0, 10)
                    self.container.Size = self.container.Size + UDim2.new(0, 0, 0, 10)
                end

                self.object.Size = self.object.Size + UDim2.new(0, 0, 0, 10)
                self.object.border.Size = self.object.border.Size + UDim2.new(0, 0, 0, 10)
            end
        end

        if not getToggled() then return end

        originalTabY = self.parentObject.AbsoluteSize.Y
        originalTabContainerY = self.container.AbsoluteSize.Y
    end

    function tabs:textbox(name, options, callback)
        local default = options.default or "..."
        local location = options.location or self.flags
        local flag = options.flag or ""
        local callback = callback or function() end

        local newTextBox = library:createElement("Frame", {
            Name = name;
            Size = UDim2.new(0, 200, 0, 45);
            BackgroundTransparency = 1;
            LayoutOrder = self:getOrder();
            library:createElement("ImageLabel", {
                Name = "border";
                Size = UDim2.new(1, 0, 0, 35);
                Position = UDim2.new(0, 0, 0, 5);
                Image = "rbxassetid://4894670678";
                ImageColor3 = Color3.fromRGB(25, 25, 25);
                ImageTransparency = 0.5;
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(5, 5, 434, 297);
                BackgroundTransparency = 1;
                ClipsDescendants = true;
                library:createElement("ImageLabel", {
                    Name = "frame";
                    Size = UDim2.new(1, -2, 1, -2);
                    Position = UDim2.new(0, 1, 0, 1);
                    Image = "rbxassetid://4894670678";
                    ImageColor3 = Color3.fromRGB(50, 50, 50);
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(5, 5, 434, 297);
                    BackgroundTransparency = 1;
                    library:createElement("TextLabel", {
                        Name = "title";
                        Size = UDim2.new(1, -8, 0.5, 0);
                        Position = UDim2.new(0, 8, 0, 0);
                        Text = name;
                        TextColor3 = Color3.fromRGB(250, 250, 250);
                        TextSize = 12;
                        TextWrapped = true;
                        Font = Enum.Font.GothamSemibold;
                        BackgroundTransparency = 1;
                    });
                    library:createElement("ImageLabel", {
                        Name = "textBorder";
                        Size = UDim2.new(0, 135, 0, 15);
                        Position = UDim2.new(0, 35, 0, 16);
                        Image = "rbxassetid://4894670678";
                        ImageColor3 = Color3.fromRGB(25, 25, 25);
                        ImageTransparency = 0.5;
                        ScaleType = Enum.ScaleType.Slice;
                        SliceCenter = Rect.new(5, 5, 434, 297);
                        BackgroundTransparency = 1;
                        library:createElement("ImageLabel", {
                            Name = "textFrame";
                            Size = UDim2.new(1, -2, 1, -2);
                            Position = UDim2.new(0, 1, 0, 1);
                            Image = "rbxassetid://4894670678";
                            ImageColor3 = Color3.fromRGB(70, 70, 70);
                            ScaleType = Enum.ScaleType.Slice;
                            SliceCenter = Rect.new(5, 5, 434, 297);
                            BackgroundTransparency = 1;
                            ClipsDescendants = true;
                            library:createElement("TextBox", {
                                Name = "textInput";
                                Size = UDim2.new(1, 0, 1, 0);
                                Position = UDim2.new(0, 0, 0, 0);
                                Text = default;
                                TextColor3 = Color3.fromRGB(250, 250, 250);
                                TextSize = 12;
                                TextWrapped = true;
                                Font = Enum.Font.GothamSemibold;
                                BackgroundTransparency = 1;
                            })
                        })
                    });
                })
            });
            Parent = self.container;
        })

        local textBox = newTextBox.border.frame.textBorder.textFrame.textInput

        textBox.FocusLost:Connect(function(enterPressed)
            if not enterPressed then return end

            location[flag] = textBox.Text
            callback(location[flag])
        end)
    end

    function tabs:colorSelector(name, options, callback)
        local location = options.location or self.flags
        local flag = options.flag or ""
        local default = options.default or Color3.fromRGB(255, 255, 255)
        local callback = callback or function() end

        location[flag] = default

        local R = math.floor(default.R * 255)
        local G = math.floor(default.G * 255)
        local B = math.floor(default.B * 255)

        local newColorSelector = library:createElement("Frame", {
            Name = name;
            Size = UDim2.new(0, 200, 0, 160);
            BackgroundTransparency = 1;
            LayoutOrder = self:getOrder();
            library:createElement("ImageLabel", {
                Name = "border";
                Size = UDim2.new(1, 0, 0, 151);
                Position = UDim2.new(0, 0, 0, 5);
                BackgroundTransparency = 1;
                Image = "rbxassetid://4894670678";
                ImageColor3 = Color3.fromRGB(200, 58, 75);
                ImageTransparency = 0.35;
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(5, 5, 434, 297);
                library:createElement("ImageLabel", {
                    Name = "frame";
                    Size = UDim2.new(1, -2, 1, -2);
                    Position = UDim2.new(0, 1, 0, 1);
                    BackgroundTransparency = 1;
                    Image = "rbxassetid://4894670678";
                    ImageColor3 = Color3.fromRGB(50, 50, 50);
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(5, 5, 434, 297);
                    ClipsDescendants = true;
                    library:createElement("TextLabel", {
                        Name = "title";
                        Size = UDim2.new(1, 0, 0, 25);
                        Position = UDim2.new(0, 0, 0, 0);
                        Text = name;
                        TextColor3 = Color3.fromRGB(250, 250, 250);
                        TextSize = 12;
                        TextWrapped = true;
                        Font = Enum.Font.GothamSemibold;
                        BackgroundTransparency = 1;
                    });
                    library:createElement("ImageLabel", {
                        Name = "redBorder";
                        Size = UDim2.new(1, -10, 0, 25);
                        Position = UDim2.new(0, 5, 0, 25);
                        BackgroundTransparency = 1;
                        Image = "rbxassetid://4894670678";
                        ImageColor3 = Color3.fromRGB(25, 25, 25);
                        ImageTransparency = 0.35;
                        ScaleType = Enum.ScaleType.Slice;
                        SliceCenter = Rect.new(5, 5, 434, 297);
                        library:createElement("ImageLabel", {
                            Name = "frame";
                            Size = UDim2.new(1, -2, 1, -2);
                            Position = UDim2.new(0, 1, 0, 1);
                            BackgroundTransparency = 1;
                            Image = "rbxassetid://4894670678";
                            ImageColor3 = Color3.fromRGB(40, 40, 40);
                            ScaleType = Enum.ScaleType.Slice;
                            SliceCenter = Rect.new(5, 5, 434, 297);
                            ClipsDescendants = true;
                            library:createElement("TextLabel", {
                                Name = "redLabel";
                                Size = UDim2.new(0.1, 0, 0.1, 0);
                                Position = UDim2.new(0.015, 0, 0.5, -1);
                                Text = "R";
                                TextColor3 = Color3.fromRGB(250, 250, 250);
                                TextSize = 10;
                                TextWrapped = true;
                                Font = Enum.Font.GothamSemibold;
                                BackgroundTransparency = 1;
                            });
                            library:createElement("ImageLabel", {
                                Name = "gradientSelectorBorder";
                                Size = UDim2.new(0.65, 0, 0.65, 0);
                                Position = UDim2.new(0.25/2, 0, 0.35/2, 0);
                                Image = "rbxassetid://4894670678";
                                ImageColor3 = Color3.fromRGB(25, 25, 25);
                                ScaleType = Enum.ScaleType.Slice;
                                SliceCenter = Rect.new(5, 5, 434, 297);
                                BackgroundTransparency = 1;
                                library:createElement("ImageLabel", {
                                    Name = "gradientSelector";
                                    Size = UDim2.new(1, -2, 1, -2);
                                    Position = UDim2.new(0, 1, 0, 1);
                                    Image = "rbxassetid://4894670678";
                                    ImageColor3 = Color3.fromRGB(255, 255, 255);
                                    ScaleType = Enum.ScaleType.Slice;
                                    SliceCenter = Rect.new(5, 5, 434, 297);
                                    BackgroundTransparency = 1;
                                    ClipsDescendants = true;
                                    library:createElement("UIGradient", {
                                        Name = "gradient";
                                        Color = ColorSequence.new(Color3.fromRGB(0, 0, 0), Color3.fromRGB(255, 0, 0));
                                    });
                                    library:createElement("Frame", {
                                        Name = "slider";
                                        Size = UDim2.new(0, 2, 1, 0);
                                        BorderSizePixel = 0;
                                        BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                                        Position = UDim2.new(math.clamp(R / 255, 0, 0.98), 0, 0, 0);
                                    })
                                });
                            });
                            library:createElement("ImageLabel", {
                                Name = "selectedColorBorder";
                                Size = UDim2.new(0.09, 0, 0.65, 0);
                                Position = UDim2.new(0.87, 0, 0.35/2, 0);
                                BackgroundTransparency = 1;
                                Image = "rbxassetid://4894670678";
                                ImageColor3 = Color3.fromRGB(25, 25, 25);
                                ImageTransparency = 0.35;
                                ScaleType = Enum.ScaleType.Slice;
                                SliceCenter = Rect.new(5, 5, 434, 297);
                                library:createElement("ImageLabel", {
                                    Name = "selectedColor";
                                    Size = UDim2.new(1, -2, 1, -2);
                                    Position = UDim2.new(0, 1, 0, 1);
                                    Image = "rbxassetid://4894670678";
                                    ImageColor3 = Color3.fromRGB(R, 0, 0);
                                    ScaleType = Enum.ScaleType.Slice;
                                    SliceCenter = Rect.new(5, 5, 434, 297);
                                    BackgroundTransparency = 1;
                                    ClipsDescendants = true;
                                })
                            })
                        })
                    });
                    library:createElement("ImageLabel", {
                        Name = "greenBorder";
                        Size = UDim2.new(1, -10, 0, 25);
                        Position = UDim2.new(0, 5, 0, 55);
                        BackgroundTransparency = 1;
                        Image = "rbxassetid://4894670678";
                        ImageColor3 = Color3.fromRGB(25, 25, 25);
                        ImageTransparency = 0.35;
                        ScaleType = Enum.ScaleType.Slice;
                        SliceCenter = Rect.new(5, 5, 434, 297);
                        library:createElement("ImageLabel", {
                            Name = "frame";
                            Size = UDim2.new(1, -2, 1, -2);
                            Position = UDim2.new(0, 1, 0, 1);
                            BackgroundTransparency = 1;
                            Image = "rbxassetid://4894670678";
                            ImageColor3 = Color3.fromRGB(40, 40, 40);
                            ScaleType = Enum.ScaleType.Slice;
                            SliceCenter = Rect.new(5, 5, 434, 297);
                            ClipsDescendants = true;
                            library:createElement("TextLabel", {
                                Name = "greenLabel";
                                Size = UDim2.new(0.1, 0, 0.1, 0);
                                Position = UDim2.new(0.015, 0, 0.5, -1);
                                Text = "G";
                                TextColor3 = Color3.fromRGB(250, 250, 250);
                                TextSize = 10;
                                TextWrapped = true;
                                Font = Enum.Font.GothamSemibold;
                                BackgroundTransparency = 1;
                            });
                            library:createElement("ImageLabel", {
                                Name = "gradientSelectorBorder";
                                Size = UDim2.new(0.65, 0, 0.65, 0);
                                Position = UDim2.new(0.25/2, 0, 0.35/2, 0);
                                Image = "rbxassetid://4894670678";
                                ImageColor3 = Color3.fromRGB(25, 25, 25);
                                ScaleType = Enum.ScaleType.Slice;
                                SliceCenter = Rect.new(5, 5, 434, 297);
                                BackgroundTransparency = 1;
                                library:createElement("ImageLabel", {
                                    Name = "gradientSelector";
                                    Size = UDim2.new(1, -2, 1, -2);
                                    Position = UDim2.new(0, 1, 0, 1);
                                    Image = "rbxassetid://4894670678";
                                    ImageColor3 = Color3.fromRGB(255, 255, 255);
                                    ScaleType = Enum.ScaleType.Slice;
                                    SliceCenter = Rect.new(5, 5, 434, 297);
                                    BackgroundTransparency = 1;
                                    ClipsDescendants = true;
                                    library:createElement("UIGradient", {
                                        Name = "gradient";
                                        Color = ColorSequence.new(Color3.fromRGB(0, 0, 0), Color3.fromRGB(0, 255, 0));
                                    });
                                    library:createElement("Frame", {
                                        Name = "slider";
                                        Size = UDim2.new(0, 2, 1, 0);
                                        BorderSizePixel = 0;
                                        BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                                        Position = UDim2.new(math.clamp(G / 255, 0, 0.98), 0, 0, 0);
                                    })
                                });
                            });
                            library:createElement("ImageLabel", {
                                Name = "selectedColorBorder";
                                Size = UDim2.new(0.09, 0, 0.65, 0);
                                Position = UDim2.new(0.87, 0, 0.35/2, 0);
                                BackgroundTransparency = 1;
                                Image = "rbxassetid://4894670678";
                                ImageColor3 = Color3.fromRGB(25, 25, 25);
                                ImageTransparency = 0.35;
                                ScaleType = Enum.ScaleType.Slice;
                                SliceCenter = Rect.new(5, 5, 434, 297);
                                library:createElement("ImageLabel", {
                                    Name = "selectedColor";
                                    Size = UDim2.new(1, -2, 1, -2);
                                    Position = UDim2.new(0, 1, 0, 1);
                                    Image = "rbxassetid://4894670678";
                                    ImageColor3 = Color3.fromRGB(0, G, 0);
                                    ScaleType = Enum.ScaleType.Slice;
                                    SliceCenter = Rect.new(5, 5, 434, 297);
                                    BackgroundTransparency = 1;
                                    ClipsDescendants = true;
                                })
                            })
                        })
                    });
                    library:createElement("ImageLabel", {
                        Name = "blueBorder";
                        Size = UDim2.new(1, -10, 0, 25);
                        Position = UDim2.new(0, 5, 0, 85);
                        BackgroundTransparency = 1;
                        Image = "rbxassetid://4894670678";
                        ImageColor3 = Color3.fromRGB(25, 25, 25);
                        ImageTransparency = 0.35;
                        ScaleType = Enum.ScaleType.Slice;
                        SliceCenter = Rect.new(5, 5, 434, 297);
                        library:createElement("ImageLabel", {
                            Name = "frame";
                            Size = UDim2.new(1, -2, 1, -2);
                            Position = UDim2.new(0, 1, 0, 1);
                            BackgroundTransparency = 1;
                            Image = "rbxassetid://4894670678";
                            ImageColor3 = Color3.fromRGB(40, 40, 40);
                            ScaleType = Enum.ScaleType.Slice;
                            SliceCenter = Rect.new(5, 5, 434, 297);
                            ClipsDescendants = true;
                            library:createElement("TextLabel", {
                                Name = "blueLabel";
                                Size = UDim2.new(0.1, 0, 0.1, 0);
                                Position = UDim2.new(0.015, 0, 0.5, -1);
                                Text = "B";
                                TextColor3 = Color3.fromRGB(250, 250, 250);
                                TextSize = 10;
                                TextWrapped = true;
                                Font = Enum.Font.GothamSemibold;
                                BackgroundTransparency = 1;
                            });
                            library:createElement("ImageLabel", {
                                Name = "gradientSelectorBorder";
                                Size = UDim2.new(0.65, 0, 0.65, 0);
                                Position = UDim2.new(0.25/2, 0, 0.35/2, 0);
                                Image = "rbxassetid://4894670678";
                                ImageColor3 = Color3.fromRGB(25, 25, 25);
                                ScaleType = Enum.ScaleType.Slice;
                                SliceCenter = Rect.new(5, 5, 434, 297);
                                BackgroundTransparency = 1;
                                library:createElement("ImageLabel", {
                                    Name = "gradientSelector";
                                    Size = UDim2.new(1, -2, 1, -2);
                                    Position = UDim2.new(0, 1, 0, 1);
                                    Image = "rbxassetid://4894670678";
                                    ImageColor3 = Color3.fromRGB(255, 255, 255);
                                    ScaleType = Enum.ScaleType.Slice;
                                    SliceCenter = Rect.new(5, 5, 434, 297);
                                    BackgroundTransparency = 1;
                                    ClipsDescendants = true;
                                    library:createElement("UIGradient", {
                                        Name = "gradient";
                                        Color = ColorSequence.new(Color3.fromRGB(0, 0, 0), Color3.fromRGB(0, 0, 255));
                                    });
                                    library:createElement("Frame", {
                                        Name = "slider";
                                        Size = UDim2.new(0, 2, 1, 0);
                                        BorderSizePixel = 0;
                                        BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                                        Position = UDim2.new(math.clamp(B / 255, 0, 0.98), 0, 0, 0);
                                    })
                                });
                            });
                            library:createElement("ImageLabel", {
                                Name = "selectedColorBorder";
                                Size = UDim2.new(0.09, 0, 0.65, 0);
                                Position = UDim2.new(0.87, 0, 0.35/2, 0);
                                BackgroundTransparency = 1;
                                Image = "rbxassetid://4894670678";
                                ImageColor3 = Color3.fromRGB(25, 25, 25);
                                ImageTransparency = 0.35;
                                ScaleType = Enum.ScaleType.Slice;
                                SliceCenter = Rect.new(5, 5, 434, 297);
                                library:createElement("ImageLabel", {
                                    Name = "selectedColor";
                                    Size = UDim2.new(1, -2, 1, -2);
                                    Position = UDim2.new(0, 1, 0, 1);
                                    Image = "rbxassetid://4894670678";
                                    ImageColor3 = Color3.fromRGB(0, 0, B);
                                    ScaleType = Enum.ScaleType.Slice;
                                    SliceCenter = Rect.new(5, 5, 434, 297);
                                    BackgroundTransparency = 1;
                                    ClipsDescendants = true;
                                })
                            })
                        })
                    });
                    library:createElement("ImageLabel", {
                        Name = "finalBorder";
                        Size = UDim2.new(1, -10, 0, 25);
                        Position = UDim2.new(0, 5, 0, 115);
                        BackgroundTransparency = 1;
                        Image = "rbxassetid://4894670678";
                        ImageColor3 = Color3.fromRGB(25, 25, 25);
                        ImageTransparency = 0.35;
                        ScaleType = Enum.ScaleType.Slice;
                        SliceCenter = Rect.new(5, 5, 434, 297);
                        library:createElement("ImageLabel", {
                            Name = "frame";
                            Size = UDim2.new(1, -2, 1, -2);
                            Position = UDim2.new(0, 1, 0, 1);
                            BackgroundTransparency = 1;
                            Image = "rbxassetid://4894670678";
                            ImageColor3 = Color3.fromRGB(40, 40, 40);
                            ScaleType = Enum.ScaleType.Slice;
                            SliceCenter = Rect.new(5, 5, 434, 297);
                            ClipsDescendants = true;
                            library:createElement("TextLabel", {
                                Name = "redLabel";
                                Size = UDim2.new(0.1, 0, 0.1, 0);
                                Position = UDim2.new(0.015, 0, 0.5, -1);
                                Text = "R";
                                TextColor3 = Color3.fromRGB(250, 250, 250);
                                TextSize = 10;
                                TextWrapped = true;
                                Font = Enum.Font.GothamSemibold;
                                BackgroundTransparency = 1;
                            });
                            library:createElement("ImageLabel", {
                                Name = "redButtonBorder";
                                Size = UDim2.new(0, 30, 0, 15);
                                Position = UDim2.new(0, 20, 0, 4);
                                Image = "rbxassetid://4894670678";
                                ImageColor3 = Color3.fromRGB(25, 25, 25);
                                ImageTransparency = 0.5;
                                ScaleType = Enum.ScaleType.Slice;
                                SliceCenter = Rect.new(5, 5, 434, 297);
                                BackgroundTransparency = 1;
                                library:createElement("ImageLabel", {
                                    Name = "redButtonFrame";
                                    Size = UDim2.new(1, -2, 1, -2);
                                    Position = UDim2.new(0, 1, 0, 1);
                                    Image = "rbxassetid://4894670678";
                                    ImageColor3 = Color3.fromRGB(70, 70, 70);
                                    ScaleType = Enum.ScaleType.Slice;
                                    SliceCenter = Rect.new(5, 5, 434, 297);
                                    BackgroundTransparency = 1;
                                    ClipsDescendants = true;
                                    library:createElement("TextBox", {
                                        Name = "redLabel";
                                        Size = UDim2.new(1, 0, 1, 0);
                                        Position = UDim2.new(0, 0, 0, 0);
                                        Text = R;
                                        TextColor3 = Color3.fromRGB(250, 250, 250);
                                        TextSize = 12;
                                        TextWrapped = true;
                                        Font = Enum.Font.GothamSemibold;
                                        BackgroundTransparency = 1;
                                    })
                                })
                            });
                            library:createElement("TextLabel", {
                                Name = "greenLabel";
                                Size = UDim2.new(0.1, 0, 0.1, 0);
                                Position = UDim2.new(0.27, 0, 0.5, -1);
                                Text = "G";
                                TextColor3 = Color3.fromRGB(250, 250, 250);
                                TextSize = 10;
                                TextWrapped = true;
                                Font = Enum.Font.GothamSemibold;
                                BackgroundTransparency = 1;
                            });
                            library:createElement("ImageLabel", {
                                Name = "greenButtonBorder";
                                Size = UDim2.new(0, 30, 0, 15);
                                Position = UDim2.new(0, 68, 0, 4);
                                Image = "rbxassetid://4894670678";
                                ImageColor3 = Color3.fromRGB(25, 25, 25);
                                ImageTransparency = 0.5;
                                ScaleType = Enum.ScaleType.Slice;
                                SliceCenter = Rect.new(5, 5, 434, 297);
                                BackgroundTransparency = 1;
                                library:createElement("ImageLabel", {
                                    Name = "greenButtonFrame";
                                    Size = UDim2.new(1, -2, 1, -2);
                                    Position = UDim2.new(0, 1, 0, 1);
                                    Image = "rbxassetid://4894670678";
                                    ImageColor3 = Color3.fromRGB(70, 70, 70);
                                    ScaleType = Enum.ScaleType.Slice;
                                    SliceCenter = Rect.new(5, 5, 434, 297);
                                    BackgroundTransparency = 1;
                                    ClipsDescendants = true;
                                    library:createElement("TextBox", {
                                        Name = "greenLabel";
                                        Size = UDim2.new(1, 0, 1, 0);
                                        Position = UDim2.new(0, 0, 0, 0);
                                        Text = G;
                                        TextColor3 = Color3.fromRGB(250, 250, 250);
                                        TextSize = 12;
                                        TextWrapped = true;
                                        Font = Enum.Font.GothamSemibold;
                                        BackgroundTransparency = 1;
                                    })
                                })
                            });
                            library:createElement("TextLabel", {
                                Name = "blueLabel";
                                Size = UDim2.new(0.1, 0, 0.1, 0);
                                Position = UDim2.new(0.53, 0, 0.5, -1);
                                Text = "B";
                                TextColor3 = Color3.fromRGB(250, 250, 250);
                                TextSize = 10;
                                TextWrapped = true;
                                Font = Enum.Font.GothamSemibold;
                                BackgroundTransparency = 1;
                            });
                            library:createElement("ImageLabel", {
                                Name = "blueButtonBorder";
                                Size = UDim2.new(0, 30, 0, 15);
                                Position = UDim2.new(0, 116, 0, 4);
                                Image = "rbxassetid://4894670678";
                                ImageColor3 = Color3.fromRGB(25, 25, 25);
                                ImageTransparency = 0.5;
                                ScaleType = Enum.ScaleType.Slice;
                                SliceCenter = Rect.new(5, 5, 434, 297);
                                BackgroundTransparency = 1;
                                library:createElement("ImageLabel", {
                                    Name = "blueButtonFrame";
                                    Size = UDim2.new(1, -2, 1, -2);
                                    Position = UDim2.new(0, 1, 0, 1);
                                    Image = "rbxassetid://4894670678";
                                    ImageColor3 = Color3.fromRGB(70, 70, 70);
                                    ScaleType = Enum.ScaleType.Slice;
                                    SliceCenter = Rect.new(5, 5, 434, 297);
                                    BackgroundTransparency = 1;
                                    ClipsDescendants = true;
                                    library:createElement("TextBox", {
                                        Name = "blueLabel";
                                        Size = UDim2.new(1, 0, 1, 0);
                                        Position = UDim2.new(0, 0, 0, 0);
                                        Text = B;
                                        TextColor3 = Color3.fromRGB(250, 250, 250);
                                        TextSize = 12;
                                        TextWrapped = true;
                                        Font = Enum.Font.GothamSemibold;
                                        BackgroundTransparency = 1;
                                    })
                                })
                            });
                            library:createElement("ImageLabel", {
                                Name = "selectedColorBorder";
                                Size = UDim2.new(0.09, 0, 0.65, 0);
                                Position = UDim2.new(0.87, 0, 0.35/2, 0);
                                BackgroundTransparency = 1;
                                Image = "rbxassetid://4894670678";
                                ImageColor3 = Color3.fromRGB(25, 25, 25);
                                ImageTransparency = 0.35;
                                ScaleType = Enum.ScaleType.Slice;
                                SliceCenter = Rect.new(5, 5, 434, 297);
                                library:createElement("ImageLabel", {
                                    Name = "selectedColor";
                                    Size = UDim2.new(1, -2, 1, -2);
                                    Position = UDim2.new(0, 1, 0, 1);
                                    Image = "rbxassetid://4894670678";
                                    ImageColor3 = Color3.fromRGB(R, G, B);
                                    ScaleType = Enum.ScaleType.Slice;
                                    SliceCenter = Rect.new(5, 5, 434, 297);
                                    BackgroundTransparency = 1;
                                    ClipsDescendants = true;
                                })
                            })
                        })
                    });
                })
            });
            Parent = self.container;
        })

        local selectors = {
            red = {
                slider = newColorSelector.border.frame.redBorder.frame.gradientSelectorBorder.gradientSelector.slider;
                selectedColor = newColorSelector.border.frame.redBorder.frame.selectedColorBorder.selectedColor;
            };
            green = {
                slider = newColorSelector.border.frame.greenBorder.frame.gradientSelectorBorder.gradientSelector.slider;
                selectedColor = newColorSelector.border.frame.greenBorder.frame.selectedColorBorder.selectedColor;
            };
            blue = {
                slider = newColorSelector.border.frame.blueBorder.frame.gradientSelectorBorder.gradientSelector.slider;
                selectedColor = newColorSelector.border.frame.blueBorder.frame.selectedColorBorder.selectedColor;
            };
        }

        local textBoxes = {
            finalColor = newColorSelector.border.frame.finalBorder.frame.selectedColorBorder.selectedColor;
            red = {
                textBox = newColorSelector.border.frame.finalBorder.frame.redButtonBorder.redButtonFrame.redLabel;
            };
            green = {
                textBox = newColorSelector.border.frame.finalBorder.frame.greenButtonBorder.greenButtonFrame.greenLabel;
            };
            blue = {
                textBox = newColorSelector.border.frame.finalBorder.frame.blueButtonBorder.blueButtonFrame.blueLabel;
            };
        }
        
        local function updateColors(color, num)
            if color == "red" then
                R = num
                selectors[color].selectedColor.ImageColor3 = Color3.fromRGB(R, 0, 0)
            elseif color == "green" then
                G = num
                selectors[color].selectedColor.ImageColor3 = Color3.fromRGB(0, G, 0)
            elseif color == "blue" then
                B = num
                selectors[color].selectedColor.ImageColor3 = Color3.fromRGB(0, 0, B)
            else
                return
            end

            textBoxes[color].textBox.Text = num

            textBoxes.finalColor.ImageColor3 = Color3.fromRGB(R, G, B)

            selectors[color].slider:TweenPosition(UDim2.new(math.clamp(num / 255, 0, 0.98), 0, 0, 0), "Out", "Quad", 0.15, true)

            location[flag] = Color3.fromRGB(R, G, B)
            callback(location[flag])
        end

        for i,v in pairs(selectors) do
            local renderStepped, inputBegan, inputEnded

            local connected = false

            local slider = v.slider
            local container = slider.Parent
            local selectedColor = v.selectedColor

            container.MouseEnter:Connect(function()
                local function update()
                    if renderStepped then renderStepped:Disconnect() end

                    renderStepped = runService.RenderStepped:Connect(function()
                        local mouse = userInputService:GetMouseLocation()
                        local percent = (mouse.X - container.AbsolutePosition.X) / (container.AbsoluteSize.X)

                        percent = math.clamp(percent, 0, 1)
                        percent = tonumber(string.format("%.2f", percent))

                        local num = math.floor(percent * 255)

                        updateColors(i, num)
                    end)
                end

                local function disconnect()
                    if renderStepped then renderStepped:Disconnect() end
                    if inputBegan then inputBegan:Disconnect() end
                    if inputEnded then inputEnded:Disconnect() end
                    if mouseDown then mouseDown:Disconnect() end
                    if mouseUp then mouseUp:Disconnect() end
                end

                inputBegan = container.InputBegan:Connect(function(input)
                    if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
                    connected = true
                    update()
                end)

                inputEnded = container.InputEnded:Connect(function(input)
                    if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
                    if not connected then return end
                    disconnect()
                    connected = false
                end)
            end)
        end

        for i,v in pairs(textBoxes) do
            if type(v) == "table" then

                local slider = selectors[i].slider

                local first = true

                v.textBox:GetPropertyChangedSignal("Text"):Connect(function()
                    v.textBox.Text = v.textBox.Text:gsub("%D+", "")
                end)

                v.textBox.FocusLost:Connect(function(enterPressed)
                    if not enterPressed then 
                        if i == "red" then
                            v.textBox.Text = R
                        elseif i == "green" then
                            v.textBox.Text = G
                        elseif i == "blue" then
                            v.textBox.Text = B
                        end

                        return 
                    end

                    v.textBox.Text = math.clamp(tonumber(v.textBox.Text), 0, 255)

                    updateColors(i, tonumber(v.textBox.Text))
                end)

            end
        end
    end

    function tabs:button(name, callback)
        local callback = callback or function() end

        local newButton = library:createElement("Frame", {
            Name = name;
            Size = UDim2.new(0, 200, 0, 35);
            BackgroundTransparency = 1;
            LayoutOrder = self:getOrder();
            library:createElement("ImageLabel", {
                Name = "border";
                Size = UDim2.new(1, 0, 0, 26);
                Position = UDim2.new(0, 0, 0, 5);
                BackgroundTransparency = 1;
                Image = "rbxassetid://4894670678";
                ImageColor3 = Color3.fromRGB(200, 58, 75);
                ImageTransparency = 0.35;
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(5, 5, 434, 297);
                library:createElement("ImageButton", {
                    Name = "frame";
                    Size = UDim2.new(1, -2, 1, -2);
                    Position = UDim2.new(0, 1, 0, 1);
                    BackgroundTransparency = 1;
                    Image = "rbxassetid://4894670678";
                    ImageColor3 = Color3.fromRGB(50, 50, 50);
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(5, 5, 434, 297);
                    ClipsDescendants = true;
                    library:createElement("TextLabel", {
                        Name = "title";
                        Size = UDim2.new(1, 0, 1, 0);
                        Position = UDim2.new(0, 0, 0, 0);
                        Text = name;
                        TextColor3 = Color3.fromRGB(250, 250, 250);
                        TextSize = 12;
                        TextWrapped = true;
                        Font = Enum.Font.GothamSemibold;
                        BackgroundTransparency = 1;
                    });
                    library:createElement("ImageLabel", {
                        Name = "mouseIcon";
                        Size = UDim2.new(0, 14, 0, 18);
                        Position = UDim2.new(0, 5, 0, 3);
                        BackgroundTransparency = 1;
                        Image = "rbxassetid://5880691637";
                        ScaleType = Enum.ScaleType.Slice;
                        SliceCenter = Rect.new(6, 6, 14, 14);
                        BackgroundTransparency = 1;
                    })
                })
            });
            Parent = self.container;
        })

        newButton.border.frame.InputBegan:Connect(function(input)
            if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
            callback()
        end)
    end

    function tabs:toggle(name, options, useBind, bindOptions, callback)
        local location = options.location or self.flags
        local flag = options.flag or ""
        local default = options.default or false
        local callback = callback or function() end

        location[flag] = default

        local newToggle = library:createElement("Frame", {
            Name = name;
            Size = UDim2.new(0, 200, 0, 35);
            BackgroundTransparency = 1;
            LayoutOrder = self:getOrder();
            library:createElement("ImageLabel", {
                Name = "border";
                Size = UDim2.new(1, 0, 0, 26);
                Position = UDim2.new(0, 0, 0, 5);
                BackgroundTransparency = 1;
                Image = "rbxassetid://4894670678";
                ImageColor3 = Color3.fromRGB(25, 25, 25);
                ImageTransparency = 0.5;
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(5, 5, 434, 297);
                library:createElement("ImageLabel", {
                    Name = "frame";
                    Size = UDim2.new(1, -2, 1, -2);
                    Position = UDim2.new(0, 1, 0, 1);
                    BackgroundTransparency = 1;
                    Image = "rbxassetid://4894670678";
                    ImageColor3 = Color3.fromRGB(50, 50, 50);
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(5, 5, 434, 297);
                    ClipsDescendants = true;
                    library:createElement("TextLabel", {
                        Name = "title";
                        Size = UDim2.new(1, -10, 1, 0);
                        Position = UDim2.new(0, 10, 0, 0);
                        Text = name;
                        TextColor3 = Color3.fromRGB(250, 250, 250);
                        TextSize = 12;
                        TextWrapped = true;
                        Font = Enum.Font.GothamSemibold;
                        TextXAlignment = Enum.TextXAlignment.Left;
                        BackgroundTransparency = 1;
                    });
                    library:createElement("ImageButton", {
                        Name = "button";
                        Size = UDim2.new(0, 18, 0, 18);
                        Position = UDim2.new(1, -26, 0, 3);
                        BackgroundTransparency = 1;
                        Image = "rbxassetid://4892761119";
                        ScaleType = Enum.ScaleType.Slice;
                        SliceCenter = Rect.new(6, 6, 14, 14);
                        BackgroundTransparency = 1;
                        library:createElement("ImageLabel", {
                            Name = "toggle";
                            Size = (location[flag] and UDim2.new(1, 0, 1, 0)) or UDim2.new(0, 0, 0, 0);
                            Position = (location[flag] and UDim2.new(0, 0, 0, 0)) or UDim2.new(0.5, 0, 0.5, 0);
                            Image = "rbxassetid://5880482965";
                            BackgroundTransparency = 1;
                        })
                    })
                })
            });
            Parent = self.container;
        })

        local button = newToggle.border.frame.button

        local click = function()
            location[flag] = not location[flag]
            callback(location[flag])
            button.toggle:TweenSizeAndPosition((location[flag] and UDim2.new(1, 0, 1, 0)) or UDim2.new(0, 0, 0, 0), (location[flag] and UDim2.new(0, 0, 0, 0)) or UDim2.new(0.5, 0, 0.5, 0), (location[flag] and 'Out') or 'In', (location[flag] and 'Elastic') or 'Quad', (location[flag] and 0.75) or 0.15, true)
        end

        if useBind then
            local shortNames = {
                LeftControl = "LeftCtrl";
                LeftShift = "LShift";
                RightShift = "RShift";
                MouseButton1 = "Mouse1";
                MouseButton2 = "Mouse2";
            }

            local banned = {
                Return = true;
                Space = true;
                Tab = true;
                Unknown = true;
                RightControl = true;
            }

            local allowed = {
                MouseButton1 = true;
                MouseButton2 = true;
            }

            local bindLocation = bindOptions.location or self.flags
            local bindFlag = bindOptions.flag or ""
            local kbOnly = bindOptions.kbonly or false
            local bindDefault = bindOptions.default or nil

            local passed = true
            if kbOnly and tostring(bindDefault):find("MouseButton") then
                passed = false
            end
            
            if passed then
                bindLocation[bindFlag] = bindDefault
            end

            local name = (bindDefault and (shortNames[bindDefault.Name] or bindDefault.Name)) or "None"

            local bind = library:createElement("ImageLabel", {
                Name = "bindBorder";
                Size = ((bindDefault and shortNames[bindDefault.Name] or name == "None") and UDim2.new(0, 50, 0, 15)) or UDim2.new(0, 30, 0, 15);
                Position = ((bindDefault and shortNames[bindDefault.Name] or name == "None") and UDim2.new(0, 115, 0, 4)) or UDim2.new(0, 135, 0, 4);
                Image = "rbxassetid://4894670678";
                ImageColor3 = Color3.fromRGB(25, 25, 25);
                ImageTransparency = 0.5;
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(5, 5, 434, 297);
                BackgroundTransparency = 1;
                library:createElement("ImageLabel", {
                    Name = "bindFrame";
                    Size = UDim2.new(1, -2, 1, -2);
                    Position = UDim2.new(0, 1, 0, 1);
                    Image = "rbxassetid://4894670678";
                    ImageColor3 = Color3.fromRGB(70, 70, 70);
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(5, 5, 434, 297);
                    BackgroundTransparency = 1;
                    ClipsDescendants = true;
                    library:createElement("TextButton", {
                        Name = "bindLabel";
                        Size = UDim2.new(1, 0, 1, 0);
                        Position = UDim2.new(0, 0, 0, 0);
                        Text = name;
                        TextColor3 = Color3.fromRGB(250, 250, 250);
                        TextSize = 12;
                        TextWrapped = true;
                        Font = Enum.Font.GothamSemibold;
                        BackgroundTransparency = 1;
                    })
                });
                Parent = newToggle.border.frame;
            })

            bind.bindFrame.bindLabel.MouseButton1Click:Connect(function()
                library.binding = true

                bind.bindFrame.bindLabel.Text = "..."

                local input, b = userInputService.InputBegan:Wait()

                if (input.UserInputType ~= Enum.UserInputType.Keyboard and allowed[input.UserInputType.Name] and not kbOnly) or (input.KeyCode and not banned[input.KeyCode.Name]) then
                    local name = (input.UserInputType ~= Enum.UserInputType.Keyboard and input.UserInputType.Name) or ((input.KeyCode == Enum.KeyCode.Delete or input.KeyCode == Enum.KeyCode.Escape) and "None") or input.KeyCode.Name
                    
                    if name == "None" then
                        bindLocation[bindFlag] = nil
                    else
                        bindLocation[bindFlag] = input
                    end

                    if shortNames[name] then
                        bind:TweenSizeAndPosition(UDim2.new(0, 50, 0, 15), UDim2.new(0, 115, 0, 4), "Out", "Quad", 0.15, true)
                        bind.bindFrame.bindLabel.Text = shortNames[name]
                    else
                        bind:TweenSizeAndPosition((string.len(name) > 3 and UDim2.new(0, 50, 0, 15)) or UDim2.new(0, 30, 0, 15), (string.len(name) > 3 and UDim2.new(0, 115, 0, 4)) or UDim2.new(0, 135, 0, 4), 'Out', 'Quad', 0.15, true)
                        bind.bindFrame.bindLabel.Text = name
                    end
                else
                    if bindLocation[bindFlag] then
                        local name

                        if (not pcall(function()
                            return bindLocation[bindFlag].UserInputType
                        end)) then
                            name = tostring(bindLocation[bindFlag])
                        else
                            name = (bindLocation[bindFlag].UserInputType ~= Enum.UserInputType.Keyboard and bindLocation[bindFlag].UserInputType.Name) or bindLocation[bindFlag].KeyCode.Name
                        end

                        if shortNames[name] then
                            bind:TweenSizeAndPosition(UDim2.new(0, 50, 0, 15), UDim2.new(0, 115, 0, 4), 'Out', 'Quad', 0.15, true);
                            bind.bindFrame.bindLabel.Text = shortNames[name]
                        else
                            bind:TweenSizeAndPosition((string.len(name) > 3 and UDim2.new(0, 50, 0, 15)) or UDim2.new(0, 30, 0, 15), (string.len(name) > 3 and UDim2.new(0, 115, 0, 4)) or UDim2.new(0, 135, 0, 4), 'Out', 'Quad', 0.15, true)
                            bind.bindFrame.bindLabel.Text = name
                        end
                    end
                end

                wait(0.1)
                library.binding = false
            end)

            library.binds[bindFlag] = {
                location = bindLocation;
                call = click;
            }
        end

        button.InputBegan:Connect(function(input)
            if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
            click()
        end)
    end

    function tabs:slider(name, options, sliderCallback, useToggle, toggleOptions)
        local sLocation = options.location or self.flags
        local sFlag = options.flag or ""
        local min = options.min or 0
        local max = options.max or 1
        local sDefault = (options.default ~= nil and math.floor(math.clamp(options.default, min, max))) or min
        local sCallback = sliderCallback or function() end

        sLocation[sFlag] = sDefault

        local newSlider = library:createElement("Frame", {
            Name = name;
            Size = UDim2.new(0, 200, 0, 55);
            BackgroundTransparency = 1;
            LayoutOrder = self:getOrder();
            library:createElement("ImageLabel", {
                Name = "border";
                Size = UDim2.new(1, 0, 0, 45);
                Position = UDim2.new(0, 0, 0, 5);
                Image = "rbxassetid://4894670678";
                ImageColor3 = Color3.fromRGB(25, 25, 25);
                ImageTransparency = 0.5;
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(5, 5, 434, 297);
                BackgroundTransparency = 1;
                ClipsDescendants = true;
                library:createElement("ImageLabel", {
                    Name = "frame";
                    Size = UDim2.new(1, -2, 1, -2);
                    Position = UDim2.new(0, 1, 0, 1);
                    Image = "rbxassetid://4894670678";
                    ImageColor3 = Color3.fromRGB(50, 50, 50);
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(5, 5, 434, 297);
                    BackgroundTransparency = 1;
                    library:createElement("TextLabel", {
                        Name = "title";
                        Size = UDim2.new(1, -8, 0.5, 0);
                        Position = UDim2.new(0, 8, 0, 0);
                        Text = name;
                        TextColor3 = Color3.fromRGB(250, 250, 250);
                        TextSize = 12;
                        TextWrapped = true;
                        Font = Enum.Font.GothamSemibold;
                        TextXAlignment = Enum.TextXAlignment.Left;
                        BackgroundTransparency = 1;
                    });
                    library:createElement("ImageLabel", {
                        Name = "valueButtonBorder";
                        Size = UDim2.new(0, 35, 0, 15);
                        Position = UDim2.new(0, 155, 0, 4);
                        Image = "rbxassetid://4894670678";
                        ImageColor3 = Color3.fromRGB(25, 25, 25);
                        ImageTransparency = 0.5;
                        ScaleType = Enum.ScaleType.Slice;
                        SliceCenter = Rect.new(5, 5, 434, 297);
                        BackgroundTransparency = 1;
                        library:createElement("ImageLabel", {
                            Name = "valueButtonFrame";
                            Size = UDim2.new(1, -2, 1, -2);
                            Position = UDim2.new(0, 1, 0, 1);
                            Image = "rbxassetid://4894670678";
                            ImageColor3 = Color3.fromRGB(70, 70, 70);
                            ScaleType = Enum.ScaleType.Slice;
                            SliceCenter = Rect.new(5, 5, 434, 297);
                            BackgroundTransparency = 1;
                            ClipsDescendants = true;
                            library:createElement("TextBox", {
                                Name = "valueLabel";
                                Size = UDim2.new(1, 0, 1, 0);
                                Position = UDim2.new(0, 0, 0, 0);
                                Text = tostring(sDefault);
                                TextColor3 = Color3.fromRGB(250, 250, 250);
                                TextSize = 12;
                                TextWrapped = true;
                                Font = Enum.Font.GothamSemibold;
                                BackgroundTransparency = 1;
                            })
                        })
                    });
                    library:createElement("Frame", {
                        Name = "container";
                        BorderSizePixel = 0;
                        Size = UDim2.new(0, (useToggle and 150) or 175, 0, 8);
                        Position = UDim2.new(0, (useToggle and 35) or 10, 0, 27);
                        BackgroundTransparency = 1;
                        library:createElement("Frame", {
                            Name = "sliderBar";
                            Size = UDim2.new(1, 0, 0, 2);
                            Position = UDim2.new(0, 0, 0, 3);
                            BorderSizePixel = 0;
                            library:createElement("Frame", {
                                Name = "moveBar";
                                Size = UDim2.new(((sDefault - min) / (max - min)), 0, 1, 0);
                                Position = UDim2.new(0, 0, 0, 0);
                                BorderSizePixel = 0;
                                BackgroundColor3 = Color3.fromRGB(200, 58, 75);
                                BackgroundTransparency = 0;
                            });
                            library:createElement("ImageLabel", {
                                Name = "circleBorder";
                                Size = UDim2.new(0, 10, 0, 10);
                                Position = UDim2.new(((sDefault - min) / (max - min)), 0, 0, -4);
                                BackgroundTransparency = 1;
                                Image = "rbxassetid://4896743658";
                                ImageColor3 = Color3.fromRGB(100, 100, 100);
                                ImageTransparency = 0.3;
                                library:createElement("ImageLabel", {
                                    Name = "circleFrame";
                                    Size = UDim2.new(1, -2, 1, -2);
                                    Position = UDim2.new(0, 1, 0, 1);
                                    BackgroundTransparency = 1;
                                    Image = "rbxassetid://4896743658";
                                    ImageColor3 = Color3.fromRGB(255, 255, 255);
                                    ScaleType = Enum.ScaleType.Slice;
                                    SliceCenter = Rect.new(5, 5, 5, 5);
                                })
                            })
                        })
                    })
                })
            });
            Parent = self.container;
        })

        if useToggle then
            local tLocation = toggleOptions.location or self.flags
            local tFlag = toggleOptions.flag or ""
            local tDefault = toggleOptions.default or false
            local tCallback = toggleOptions.callback or function() end

            tLocation[tFlag] = tDefault

            local sliderToggle = library:createElement("ImageButton", {
                Name = "button";
                Size = UDim2.new(0, 18, 0, 18);
                Position = UDim2.new(0, 8, 0, 21);
                Image = "rbxassetid://4892761119";
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(6, 6, 14, 14);
                BackgroundTransparency = 1;
                library:createElement("ImageLabel", {
                    Name = "toggle";
                    Size = (tLocation[tFlag] and UDim2.new(1, 0, 1, 0)) or UDim2.new(0, 0, 0, 0);
                    Position = (tLocation[tFlag] and UDim2.new(0, 0, 0, 0)) or UDim2.new(0.5, 0, 0.5, 0);
                    Image = "rbxassetid://5880482965";
                    BackgroundTransparency = 1;
                });
                Parent = newSlider.border.frame;
            })

            sliderToggle.InputBegan:Connect(function(input)
                if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end

                tLocation[tFlag] = not tLocation[tFlag]
                tCallback(tLocation[tFlag])
                sliderToggle.toggle:TweenSizeAndPosition((tLocation[tFlag] and UDim2.new(1, 0, 1, 0)) or UDim2.new(0, 0, 0, 0), (tLocation[tFlag] and UDim2.new(0, 0, 0, 0)) or UDim2.new(0.5, 0, 0.5, 0), (tLocation[tFlag] and 'Out') or 'In', (tLocation[tFlag] and 'Elastic') or 'Quad', (tLocation[tFlag] and 0.75) or 0.15, true)
            end)
        end

        local renderStepped, inputBegan, inputEnded, mouseDown, mouseUp
        local connected = false
        local first = true

        local container = newSlider.border.frame.container
        local textBox = newSlider.border.frame.valueButtonBorder.valueButtonFrame.valueLabel

        container.MouseEnter:Connect(function()
            local function update()
                if renderStepped then renderStepped:Disconnect() end

                renderStepped = runService.RenderStepped:Connect(function()
                    local mouse = userInputService:GetMouseLocation()
                    local percent = (mouse.X - container.AbsolutePosition.X) / (container.AbsoluteSize.X)

                    percent = math.clamp(percent, 0, 1)
                    percent = tonumber(string.format("%.2f", percent))

                    if first then
                        container.sliderBar.circleBorder.Position = UDim2.new(((sDefault - min) / (max - min)), -4, 0, -4)
                        container.sliderBar.moveBar.Size = UDim2.new(((sDefault - min) / (max - min)), -4, 0, 2)
                        first = false
                    end

                    container.sliderBar.circleBorder:TweenPosition(UDim2.new(math.clamp(percent, 0, 1), -4, 0, -4), 'Out', 'Quad', 0.15, true)
                    container.sliderBar.moveBar:TweenSize(UDim2.new(math.clamp(percent, 0, 1), -4, 0, 2), 'Out', 'Quad', 0.15, true)

                    local num = min + (max - min) * percent
                    local value = math.floor(num)

                    textBox.Parent.Parent:TweenSizeAndPosition((string.len(tostring(value)) > 3 and UDim2.new(0, 45, 0, 15)) or UDim2.new(0, 30, 0, 15), (string.len(tostring(value)) > 3 and UDim2.new(0, 140, 0, 4)) or UDim2.new(0, 155, 0, 4), 'Out', 'Quad', 0.15, true)

                    textBox.Text = value
                    sLocation[sFlag] = tonumber(value)
                    sCallback(sLocation[sFlag])
                end)
            end

            local function disconnect()
                if renderStepped then renderStepped:Disconnect() end
                if inputBegan then inputBegan:Disconnect() end
                if inputEnded then inputEnded:Disconnect() end
                if mouseDown then mouseDown:Disconnect() end
                if mouseUp then mouseUp:Disconnect() end
            end

            inputBegan = container.InputBegan:Connect(function(input)
                if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
                update()
            end)

            inputEnded = container.InputEnded:Connect(function(input)
                if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
                disconnect()
            end)

            mouseDown = container.sliderBar.circleBorder.InputBegan:Connect(function(input)
                if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
                connected = true
                update()
            end)

            mouseUp = container.sliderBar.circleBorder.InputEnded:Connect(function(input)
                if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
                if not connected then return end
                disconnect()
                connected = false
            end)
        end)

        textBox:GetPropertyChangedSignal("Text"):Connect(function()
            textBox.Text = textBox.Text:gsub("[^%-%d]", "")
            textBox.Parent.Parent:TweenSizeAndPosition((string.len(textBox.Text) > 3 and UDim2.new(0, 45, 0, 15)) or UDim2.new(0, 30, 0, 15), (string.len(textBox.Text) > 3 and UDim2.new(0, 140, 0, 4)) or UDim2.new(0, 155, 0, 4), 'Out', 'Quad', 0.15, true)
        end)

        textBox.FocusLost:Connect(function(enterPressed)
            if not enterPressed then return end

            textBox.Text = math.floor(math.clamp(tonumber(textBox.Text), min, max))
            textBox.Parent.Parent:TweenSizeAndPosition((string.len(textBox.Text) > 3 and UDim2.new(0, 45, 0, 15)) or UDim2.new(0, 30, 0, 15), (string.len(textBox.Text) > 3 and UDim2.new(0, 140, 0, 4)) or UDim2.new(0, 155, 0, 4), 'Out', 'Quad', 0.15, true)
            sLocation[sFlag] = tonumber(textBox.Text)
            sCallback(sLocation[sFlag])

            container.sliderBar.circleBorder:TweenPosition(UDim2.new(((math.floor(math.clamp(tonumber(textBox.Text), min, max)) - min) / (max - min)), -4, 0, -4), 'Out', 'Quad', 0.15, true)
            container.sliderBar.moveBar:TweenSize(UDim2.new(((math.floor(math.clamp(tonumber(textBox.Text), min, max)) - min) / (max - min)), -4, 0, 2), 'Out', 'Quad', 0.15, true)
        end)
    end

    function tabs:dropdown(name, useToggles, options, callback)
        local location = options.location or self.flags
        local flag = not useToggles and options.flag or ""
        local callback = callback or function() end
        local list = options.list or {}
        local default = options.default or list[1].Name

        if not useToggles then
            location[flag] = default
        end

        local newDropdown = library:createElement("Frame", {
            Name = name;
            Size = UDim2.new(0, 200, 0, 35);
            BackgroundTransparency = 1;
            LayoutOrder = self:getOrder();
            library:createElement("ImageLabel", {
                Name = "border";
                Size = UDim2.new(1, 0, 0, 26);
                Position = UDim2.new(0, 0, 0, 5);
                BackgroundTransparency = 1;
                Image = "rbxassetid://4894670678";
                ImageColor3 = Color3.fromRGB(25, 25, 25);
                ImageTransparency = 0.5;
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(5, 5, 434, 297);
                ZIndex = 2;
                library:createElement("ImageButton", {
                    Name = "frame";
                    Size = UDim2.new(1, -2, 1, -2);
                    Position = UDim2.new(0, 1, 0, 1);
                    BackgroundTransparency = 1;
                    Image = "rbxassetid://4894670678";
                    ImageColor3 = Color3.fromRGB(50, 50, 50);
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(5, 5, 434, 297);
                    ZIndex = 2;
                    library:createElement("TextLabel", {
                        Name = "label";
                        Size = UDim2.new(1, -10, 0, 25);
                        Position = UDim2.new(0, 10, 0, 0);
                        Text = default;
                        TextColor3 = Color3.fromRGB(250, 250, 250);
                        TextSize = 12;
                        TextWrapped = true;
                        Font = Enum.Font.GothamSemibold;
                        TextXAlignment = Enum.TextXAlignment.Left;
                        BackgroundTransparency = 1;
                        ZIndex = 2;
                    })
                })
            });
            Parent = self.container;
        })

        local arrow = library:createElement("ImageLabel", {
            Name = "arrow";
            Size = UDim2.new(0, 11, 0, 6);
            Position = UDim2.new(1, -25, 0, 10);
            BackgroundTransparency = 1;
            Image = "rbxassetid://5882688826";
            ImageColor3 = Color3.fromRGB(30, 30, 30);
            ZIndex = 2;
            Parent = newDropdown.border;
        })

        local container = library:createElement("Frame", {
            Name = "containerFrame";
            Size = UDim2.new(1, 0, 0, 0);
            BackgroundTransparency = 1;
            LayoutOrder = self:getOrder();
            ZIndex = 1;
            ClipsDescendants = true;
            library:createElement("ImageLabel", {
                Name = "containerBorder";
                Size = UDim2.new(0.9, 0, 1, 0);
                Position = UDim2.new(0.05, 0, 0, 0);
                BackgroundTransparency = 1;
                Image = "rbxassetid://4894670678";
                ImageColor3 = Color3.fromRGB(25, 25, 25);
                ImageTransparency = 0.3;
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(5, 5, 434, 297);
                ClipsDescendants = true;
                ZIndex = 1;
                library:createElement("ImageLabel", {
                    Name = "container";
                    Size = UDim2.new(1, -2, 1, -2);
                    Position = UDim2.new(0, 1, 0, 1);
                    BackgroundTransparency = 1;
                    Image = "rbxassetid://4894670678";
                    ImageColor3 = Color3.fromRGB(60, 60, 60);
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(5, 5, 434, 297);
                    ClipsDescendants = true;
                    ZIndex = 1;
                    library:createElement("ScrollingFrame", {
                        Name = "scroll";
                        Size = UDim2.new(1, 0, 1, 0);
                        Position = UDim2.new(0, 0, 0, 0);
                        CanvasSize = UDim2.new(0, 0, 0, (useToggles and #list * 27) or #list * 22);
                        ScrollingEnabled = #list > 5;
                        ScrollBarThickness = (#list > 5 and 2) or 0;
                        ScrollBarImageTransparency = (#list > 5 and 0) or 1;
                        ScrollingDirection = Enum.ScrollingDirection.Y;
                        ElasticBehavior = Enum.ElasticBehavior.Never;
                        BackgroundTransparency = 1;
                        library:createElement("UIListLayout", {
                            Name = "list";
                            SortOrder = 2;
                        })
                    })
                })
            });
            Parent = self.container;
        })

        local button = newDropdown.border.frame

        local dropDown = {
            toggled = false;
            object = newDropdown;
            arrow = arrow;
            container = container.containerBorder.container.scroll;
            l = location;
            f = flag;
            usesToggles = useToggles;
        }
        table.insert(dropList, dropDown)

        for i,v in pairs(list) do
            local listItem = library:createElement("TextButton", {
                Name = v.Name;
                Size = UDim2.new(1, 0, 0, useToggles and 27 or 22);
                BackgroundTransparency = 1;
                Text = v.Name;
                TextColor3 = Color3.fromRGB(250, 250, 250);
                TextSize = 12;
                TextWrapped = true;
                Font = Enum.Font.GothamSemibold;
                LayoutOrder = i;
                ZIndex = 1;
                Parent = dropDown.container;
            })

            local toggle
            if useToggles then
                toggle = library:createElement("ImageButton", {
                    Name = "button";
                    Size = UDim2.new(0, 16, 0, 16);
                    Position = UDim2.new(0, 150, 0, 4);
                    Image = "rbxassetid://4892761119";
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(6, 6, 14, 14);
                    BackgroundTransparency = 1;
                    library:createElement("ImageLabel", {
                        Name = "toggle";
                        Size = (location[v.flag] and UDim2.new(1, 0, 1, 0)) or UDim2.new(0, 0, 0, 0);
                        Position = (location[v.flag] and UDim2.new(0, 0, 0, 0)) or UDim2.new(0.5, 0, 0.5, 0);
                        Image = "rbxassetid://5880482965";
                        BackgroundTransparency = 1;
                    });
                    Parent = listItem;
                })
            end

            if i ~= #list then
                local underline = library:createElement("Frame", {
                    Name = "underline";
                    Size = UDim2.new(0.8, 0, 0, 2);
                    Position = UDim2.new(0.1, 0, 1, -2);
                    BackgroundColor3 = Color3.fromRGB(100, 100, 100);
                    BorderSizePixel = 0;
                    BackgroundTransparency = 0.3;
                    ZIndex = 1;
                    Parent = listItem;
                })
            end

            local function switch()
                if useToggles then
                    location[v.flag] = not location[v.flag]
                    callback(location[v.flag])
                    toggle.toggle:TweenSizeAndPosition((location[v.flag] and UDim2.new(1, 0, 1, 0)) or UDim2.new(0, 0, 0, 0), (location[v.flag] and UDim2.new(0, 0, 0, 0)) or UDim2.new(0.5, 0, 0.5, 0), (location[v.flag] and 'Out') or 'In', (location[v.flag] and 'Elastic') or 'Quad', (location[v.flag] and 0.75) or 0.15, true)
                else
                    dropDown.toggled = false

                    button.label.TextTransparency = 0
                    button.label.Text = listItem.Text

                    self.parentObject:TweenSize(UDim2.new(0, self.parentObject.AbsoluteSize.X, 0, originalTabY), "In", "Quad", 0.15, true)
                    self.container:TweenSize(UDim2.new(0, self.container.AbsoluteSize.X, 0, originalTabContainerY), "In", "Quad", 0.15, true)

                    newDropdown.border.arrow.Rotation = 0
                    container:TweenSize(UDim2.new(1, 0, 0, 0), "In", "Quad", 0.15, true)
                    
                    location[flag] = tostring(listItem.Text)
                    callback(location[flag])
                end
            end

            listItem.InputBegan:Connect(function(input)
                if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
                switch()
            end)

            if useToggles then
            
                toggle.InputBegan:Connect(function(input)
                    if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
                    switch()
                end)

            end
        end

        button.InputBegan:Connect(function(input)
            if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end

            dropDown.toggled = not dropDown.toggled

            if not useToggles then
                newDropdown.border.frame.label.TextTransparency = (dropDown.toggled and 0.5) or 0
                newDropdown.border.frame.label.Text = (dropDown.toggled and name) or location[flag]
            end

            local y = 0
            if #list > 5 then
                if useToggles then y = 5 * 27 else y = 5 * 22 end
            else
                for i,v in pairs(dropDown.container:GetChildren()) do
                    if not v:IsA("UIListLayout") then
                        y = y + v.AbsoluteSize.Y
                    end
                end
            end

            for i,v in pairs(dropList) do
                if v ~= dropDown and v.toggled then 
                    v.toggled = false
                    
                    v.arrow.Rotation = 0;
                    v.container.Parent.Parent.Parent:TweenSize(UDim2.new(1, 0, 0, 0), "In", "Quad", 0.15, true)
                    wait(0.15)

                    if not useToggles then
                        v.object.border.frame.label.TextTransparency = 0
                        v.object.border.frame.label.Text = v.l[v.f]
                    end
                end
            end

            if dynamicTabContainerBottomYPos + y > dynamicContainerBottomYPos - 7 or not dropDown.toggled then
                self.parentObject:TweenSize(UDim2.new(0, self.parentObject.AbsoluteSize.X, 0, (dropDown.toggled and originalTabY + ((dynamicTabContainerBottomYPos + y) - dynamicContainerBottomYPos + 7)) or originalTabY), (dropDown.toggled and "Out") or "In", "Quad", 0.15, true)
            end

            self.container:TweenSize(UDim2.new(0, self.container.AbsoluteSize.X, 0, (dropDown.toggled and originalTabContainerY + y) or originalTabContainerY), (dropDown.toggled and 'Out') or 'In', 'Quad', 0.15, true)
            newDropdown.border.arrow.Rotation = (dropDown.toggled and 180) or 0
            container:TweenSize(UDim2.new(1, 0, 0, (dropDown.toggled and y) or 0), (dropDown.toggled and "Out") or "In", "Quad", 0.15, true)
        end)

        userInputService.InputBegan:Connect(function(input)
            if input.UserInputType ~= Enum.UserInputType.MouseButton1 then return end
            if not dropDown.toggled or (isInGui(newDropdown.border) or isInGui(container.containerBorder)) then return end

            dropDown.toggled = false

            if not useToggles then
                newDropdown.border.frame.label.TextTransparency = 0
                newDropdown.border.frame.label.Text = location[flag]
            end

            container:TweenSize(UDim2.new(1, 0, 0, 0), "In", "Quad", 0.15, true)
            self.parentObject:TweenSize(UDim2.new(0, self.parentObject.AbsoluteSize.X, 0, originalTabY), "In", "Quad", 0.15, true)
            self.container:TweenSize(UDim2.new(0, self.container.AbsoluteSize.X, 0, originalTabContainerY), "In", "Quad", 0.15, true)

            newDropdown.border.arrow.Rotation = 0
        end)
    end

    function library:createElement(class, data)
        local obj = Instance.new(class)
        
        for i,v in pairs(data) do
            if i ~= "Parent" then
            
                if typeof(v) == "Instance" then
                    v.Parent = obj
                else
                    obj[i] = v
                end
            end
        end
        
        obj.Parent = data.Parent
        return obj
    end
    
    function library:createWindow(name)
        if not library.container then
            library.container = self:createElement("ScreenGui", {
                self:createElement("Frame", {
                    Name = "Container";
                    Size = UDim2.new(1, -30, 1, 0);
                    Position = UDim2.new(0, 20, 0, 20);
                    BackgroundTransparency = 1;
                    Active = false;
                });
            }):FindFirstChild("Container")
        end

        if syn and syn.protect_gui then
            syn.protect_gui(library.container.Parent)
        end

        library.container.Parent.Parent = game:GetService("CoreGui");

        if not library.options then
            library.options = setmetatable({}, {__index = defaults})
        end

        if getgenv then
            getgenv().hattUI = library.container
        end

        local window = main:window(name)
        return window
    end

    function library:notify(title, text, timeout)
        local timeout = timeout or 5

        local notification = library:createElement("ImageLabel", {
            Name = "border";
            Size = UDim2.new(0, 200, 0, 75);
            Position = UDim2.new(1.1, 0, 0.87, 0);
            BackgroundTransparency = 1;
            Image = "rbxassetid://4894670678";
            ImageColor3 = Color3.fromRGB(200, 58, 75);
            ImageTransparency = 0.35;
            ScaleType = Enum.ScaleType.Slice;
            SliceCenter = Rect.new(5, 5, 434, 297);
            library:createElement("ImageLabel", {
                Name = "frame";
                Size = UDim2.new(1, -2, 1, -2);
                Position = UDim2.new(0, 1, 0, 1);
                BackgroundTransparency = 1;
                Image = "rbxassetid://4894670678";
                ImageColor3 = Color3.fromRGB(40, 40, 40);
                ScaleType = Enum.ScaleType.Slice;
                SliceCenter = Rect.new(5, 5, 434, 297);
                ClipsDescendants = true;
                library:createElement("ImageLabel", {
                    Name = "topBorder";
                    Size = UDim2.new(1, 0, 0, 30);
                    Position = UDim2.new(0, 0, 0, 0);
                    Image = "rbxassetid://4892463081";
                    ImageColor3 = Color3.fromRGB(50, 50, 50);
                    ScaleType = Enum.ScaleType.Slice;
                    SliceCenter = Rect.new(5, 5, 434, 125);
                    BackgroundTransparency = 1;
                    library:createElement("TextLabel", {
                        Name = "title";
                        Size = UDim2.new(0, 200, 0, 30);
                        Position = UDim2.new(0, 15, 0, 0);
                        Text = title;
                        TextWrapped = true;
                        TextXAlignment = Enum.TextXAlignment.Left;
                        TextColor3 = Color3.fromRGB(250, 250, 250);
                        Font = Enum.Font.GothamSemibold;
                        TextSize = 14;
                        BackgroundTransparency = 1;
                    });
                    library:createElement("Frame", {
                        Name = "line";
                        Size = UDim2.new(1, 0, 0, 2);
                        Position = UDim2.new(0, 0, 1, -2);
                        BorderSizePixel = 0;
                        BackgroundColor3 = Color3.fromRGB(35, 35, 35);
                    })
                });
                library:createElement("TextLabel", {
                    Name = "text";
                    Size = UDim2.new(0, 180, 0, 40);
                    Position = UDim2.new(0, 10, 0, 30);
                    Text = text;
                    TextColor3 = Color3.fromRGB(250, 250, 250);
                    TextWrapped = true;
                    Font = Enum.Font.GothamSemibold;
                    TextSize = 12;
                    BackgroundTransparency = 1;
                })
            });
            Parent = library.container;
        })
        spawn(function()
            wait(0.2)

            notification:TweenPosition(UDim2.new(0.88, 0, 0.87, 0), "In", "Quad", 0.25, true)

            wait(timeout)

            notification:TweenPosition(UDim2.new(1.1, 0, 0.87, 0), "In", "Quad", 0.25, true)

            wait(0.25)

            notification:Destroy()
        end)
    end

    local function isReallyPressed(bind, input)
        if typeof(bind) == "Instance" then
            if bind.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == bind.KeyCode then
                return true
            elseif tostring(bind.UserInputType):find("MouseButton") and input.UserInputType == bind.UserInputType then
                return true
            end
        end

        if tostring(bind):find("MouseButton1") then
            return bind == input.UserInputType
        else
            return bind == input.KeyCode
        end
    end

    userInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.RightControl then
            library.toggled = not library.toggled
            --library.container:TweenPosition(UDim2.new(0, (library.toggled and 20) or (-30 - (library.container:GetChildren()[1].frame.AbsolutePosition.X + library.container:GetChildren()[1].frame.AbsoluteSize.X)), 0, library.container.AbsolutePosition.Y), "Out", "Quad", 0.15, true)
            library.container.Visible = not library.container.Visible
        end

        if library.binding then return end

        for i,v in pairs(library.binds) do
            if v.location[i] ~= nil then

                local realBinding = v.location[i]

                if realBinding and isReallyPressed(realBinding, input) then
                    v.call()
                end

            end
        end
    end)
end


local function startsettings()
    local env = {}
    local Name = "phoenix.game_settings"
    local JSON

    local function get(name, tbl)
        if not pcall(function() readfile(Name) end) then 
            local tb1 = {}
            tb1[name] = tbl
            writefile(Name, game:service'HttpService':JSONEncode(tb1)) 
            return tb1
        else
            local tab = game:service'HttpService':JSONDecode(readfile(Name))
            if not tab[name] then
                tab[name] = tbl
            end
            return tab[name]
        end 
    end

    function env:save(name,tbl)
        local tab = game:service'HttpService':JSONDecode(readfile(Name))
        tab[name] = tbl
        writefile(Name,game:service'HttpService':JSONEncode(tab))
    end

    function env:load(name, tbl)
        local savedtbl = get(name, tbl)
        if tbl == savedtbl then
            return tbl 
        else
            for i,v in pairs(tbl) do
                if savedtbl[i] == nil then
                    savedtbl[i] = v
                end
            end
            env:save(name, savedtbl)
            return savedtbl
        end
    end
    
    return env
end

local savedsettings = startsettings()




















local mainPageIds = {}
local TeleportService = game:GetService("TeleportService")
local pages = game:GetService("AssetService"):GetGamePlacesAsync()
local places = {}
while true do
	for _,place in pairs(pages:GetCurrentPage()) do
		places[place.Name] = place.PlaceId
	end
	if pages.IsFinished then
		break
	end
	pages:AdvanceToNextPageAsync()
end





for i,v in pairs(places) do 
    if v == 1730877806 then -- // GPO ID

        --// GPO

        local settings = savedsettings:load("GPO", {
            alwaysDay = false;
            NoDodgeStam = false;
            AntiAfk = true;
            distBelowNpc = 7;
            riskyTeleportForQuest = false;
            stayUnderGround = true;
            SelectedQuestType = "Defeat";
            SelectedQuestHolderName = "Ronny";
            KillAura = false;
            PlayerKillAura = false;
            HakiFarm = false;
            NoFallDamage = false;
            runspdMod = false;
            runSpeed = 30;
            shipSettings = {
                Enabled = false;
                Speed = 20;
                MaxSpeed = 65;
                Brake = 20;
                RotateSpeed = 10;
                Height = 23;
                AntiCollisionDamage = false; -- Remote Name 'Rough'
            };
        })
        local farmQuest = false
        local farmShip = false
        --getrenv()._G.RenderCache:GetChildren()

        --[[  Auto Open Chest if within 20 studs

        local function getclosestchest()
            local mob = nil
            local closer = math.huge
            local lplayer = game:GetService("Players").LocalPlayer
            local charr = lplayer.Character
            for i, v in pairs(game:GetService("Workspace"):WaitForChild('Env'):GetChildren()) do
                if v and (v.Name == "Part") and v:FindFirstChild("ClickDetector") and charr and charr:FindFirstChild("HumanoidRootPart") and v ~= nil then
                    local mag = (v.Position-charr:FindFirstChild("HumanoidRootPart").Position).magnitude
                    if mag < closer then
                        mob = v
                        closer = mag
                    end
                end
            end
            if closer < 20 then
                warn(closer)
                return mob
            else
                game.Players.LocalPlayer.Character.HumanoidRootPart.Position = mob.Position
            end
        end
        local chest = getclosestchest()
        if chest then
            fireclickdetector(chest.ClickDetector, 1)
        else
            warn("Chest too far / nil") 
        end

        ]]

        -- ///// Always Day

        for i,v in pairs(workspace.Islands:GetChildren()) do
            if settings.alwaysDay then
                v.Settings.Weather.Value = "Normal" 
                v.Settings.Weather.Changed:Connect(function()
                    if settings.alwaysDay then
                        v.Settings.Weather.Value = "Normal" 
                    end
                end)
            end
        end

        game.Lighting.Changed:Connect(function()
            if settings.alwaysDay then
                game.Lighting.ClockTime = 12
            end
        end)

        -- ///// Set Spawn

        local islandNames = {
            "Sandora",
            "Colosseum",
            "Island Of Zou",
            "Sphinx Island",
            "Arlong Park",
            "Restaurant Baratie",
            "Town of Beginnings",
            "Shell's Town"
        }

        local islandNamesReal = {}

        for i,model in pairs(getrenv()._G.RenderCache:GetChildren()) do 
            if model and model:FindFirstChild("Settings") and model:FindFirstChildOfClass("Part") then
                islandNamesReal[model.Name] = (model:FindFirstChild("SpawnPoint") or model:FindFirstChildOfClass("Part")).CFrame
            end
        end

        for i,model in pairs(workspace.Islands:GetChildren()) do 
            if model and model:FindFirstChild("Settings") and model:FindFirstChildOfClass("Part") then
                islandNamesReal[model.Name] = (model:FindFirstChild("SpawnPoint") or model:FindFirstChildOfClass("Part")).CFrame
            end
        end

        local function setSpawn(IslandName)
            local isl = getrenv()._G.RenderCache:FindFirstChild(IslandName)
            if isl then
            local sp = isl.SpawnPoint
            repeat wait()
                spawn(function()
                        pcall(function()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = sp.CFrame
                        end)
                end)
                game:GetService("ReplicatedStorage").Events.SetSpawn:FireServer()
                if workspace.NPCs:FindFirstChild("Robo") then
                    if (isl.SpawnPoint.Position - workspace.NPCs:FindFirstChild("Robo").HumanoidRootPart.Position).magnitude < 700 then
                        sp = workspace.NPCs:FindFirstChild("Robo").HumanoidRootPart
                    end
                else
                    for i, asd in pairs(game.ReplicatedStorage.NPCCache:GetChildren()) do
                        if asd.Name == "Robo" then

                            if (isl.SpawnPoint.Position - asd.HumanoidRootPart.Position).magnitude < 700 then
                                sp = asd.HumanoidRootPart
                            end

                        end
                    end
                end
            until
                game.ReplicatedStorage["Stats"..game.Players.LocalPlayer.Name].Stats.SpawnPoint.Value == IslandName
            end
            
        end

        -- setSpawn("Island Of Zou")

        workspace.Env.DescendantAdded:Connect(function(ent)
            if ent.Parent.Name == "Folder" and ent.Name ~= "Folder" then
                warn(ent)
                library:notify("OMG BRO", "A FRUIT SPAWNED IEWDJAIUWJD, "..tostring(ent.Name), 50)
            end
        end)

        local mt = getrawmetatable(game)
        local namecall = mt.__namecall
        local setreadonly = setreadonly or make_writable


        setreadonly(mt, false)

        mt.__namecall = newcclosure(function(self, ...)
            local args = {...}
            local arguments = args
            local a = {}
            for i = 1, #arguments - 1 do
                a[i] = arguments[i]
            end
            local method = getnamecallmethod()

            if method == 'FireServer' or method == "InvokeServer" then
                if self.Name:find("alization") then
                    warn("blocked logs?")
                    return 
                elseif (self.Name == "takestam" or self.Name == "StamRequest") and settings.NoDodgeStam then
                    return 
                elseif self.Name == "Rough" and settings.shipSettings.AntiCollisionDamage then
                    return
                elseif self.Name == "swim" and settings.AntiDrown then
                    if args[1] == 'drown' then
                        return
                    end
                --[[elseif self.Name == "KnockedOut" then
                    warn'FIJAUDJW'
                    return]]
                end
            end
            
            return namecall(self, ...)    
        end)

        setreadonly(mt, true)





        local NPC_Quest_Islands = game.ReplicatedStorage.Modules.NPCInteractions.Talks
        local NPCs_Quests = _G.NPCs_Quests or nil

        if NPCs_Quests == nil then
            NPCs_Quests = {}
            for i, island in pairs(NPC_Quest_Islands:GetChildren()) do
                if island:IsA("Folder") then
                    for i2, NPCq in pairs(island:GetChildren()) do
                        for a,c in pairs(getreg()) do
                            if type(c) == 'table' then
                            for i,v in pairs(c) do
                                if tostring(v) == NPCq.Name and rawget(c, "QuestInfo") then
                                    NPCs_Quests[NPCq.Name] = c
                                    NPCs_Quests[NPCq.Name]["Module"] = NPCq
                                    end
                                end
                            end
                        end
                    end
                end
            end
            _G.NPCs_Quests = NPCs_Quests
        end

        local NPC_To_Kill = nil
        local function getclosest(isKillAura)
            local mob = {}
            if NPC_To_Kill ~= nil or isKillAura == true then
                local closer = math.huge
                local lplayer = game:GetService("Players").LocalPlayer
                local charr = lplayer.Character
                for i, v in pairs(game:GetService("Workspace"):WaitForChild('NPCs'):GetChildren()) do
                    if v and v:FindFirstChild("HumanoidRootPart") and charr and charr:FindFirstChild("HumanoidRootPart") then
                        local mag = (v.HumanoidRootPart.Position-charr:FindFirstChild("HumanoidRootPart").Position).magnitude
                        if mag < 40 or v.Name == NPC_To_Kill then
                            table.insert(mob, v)
                        end
                    end
                end
            end
            return mob
        end

        local function getclosestPlayer()
            local mob = {}
            local lplayer = game:GetService("Players").LocalPlayer
            local charr = lplayer.Character
            for i, v in pairs(game:GetService("Players"):GetPlayers()) do
                if v and v ~= lplayer and v.Character and v.Character:FindFirstChild("HumanoidRootPart") and charr and charr:FindFirstChild("HumanoidRootPart") then
                    local mag = (v.Character.HumanoidRootPart.Position-charr:FindFirstChild("HumanoidRootPart").Position).magnitude
                    if mag < 20 then
                        table.insert(mob, v.Character)
                    end
                end
            end
            
            return mob
        end

        local rageModeSpeedVal = 45
        local teleporting = false
        local tween
        function tweenMoveRage(model, target)
            spawn(function()
                print(target)
                if target and model then
                    local tweenservice = game:service'TweenService'

                    local Info = TweenInfo.new(
                        ((model:GetPrimaryPartCFrame().Position - target.Position).magnitude)/ rageModeSpeedVal, -- 80
                        Enum.EasingStyle.Quad,
                        Enum.EasingDirection.Out,
                        0,
                        false,
                        0 
                    )

                    tween = tweenservice:Create(model.PrimaryPart, Info, {CFrame = (target) * CFrame.new(0,0,0)})
                    tween:Play()
                end
            end)
        end


        local currentAttacking = nil
        spawn(function()
            while true do wait()
                pcall(function()
                    if game.Players.LocalPlayer.Character:FindFirstChild("attacking") then
                        game.Players.LocalPlayer.Character:FindFirstChild("attacking"):Destroy()
                    end
                    if game.Players.LocalPlayer.Character:FindFirstChild("Stun") then
                        game.Players.LocalPlayer.Character:FindFirstChild("Stun"):Destroy()
                    end
                end)
                if (farmQuest or farmShip) and game.Players.LocalPlayer.Character ~= nil then
                    local tabsss = getclosest()
                    if type(tabsss) == 'table' then
                        for ia, va in pairs(tabsss) do
                            local RootPart = va:FindFirstChild("HumanoidRootPart")
                            if RootPart ~= nil then
                                local mag = (RootPart.Position-game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart").Position).magnitude
                                if mag < 70 then
                                    if va.Name == NPC_To_Kill and (va == currentAttacking or (currentAttack ~= nil and currentAttacking:FindFirstChild("HumanoidRootPart") == nil) or currentAttacking == nil or currentAttacking.Parent == nil) then
                                        currentAttacking = va
                                        if not settings.stayUnderGround then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = RootPart.CFrame * CFrame.new(0,-settings.distBelowNpc,0) * CFrame.Angles(math.rad(90),0,0)
                                        else
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(RootPart.CFrame.X, RootPart.Parent.Info.SpawnCFrame.Value.Y, RootPart.CFrame.Z) * CFrame.new(0,-settings.distBelowNpc,0) * CFrame.Angles(math.rad(90),0,0)
                                        end
                                    end
                                else
                                    if va.Name == NPC_To_Kill and (va == currentAttacking or (currentAttack ~= nil and currentAttacking:FindFirstChild("HumanoidRootPart") == nil) or currentAttacking == nil or currentAttacking.Parent == nil) then
                                        currentAttacking = va
                                        if not farmShip then
                                            tweenMoveRage(game.Players.LocalPlayer.Character, RootPart.CFrame * CFrame.new(0,0,0), true)
                                        else
                                            tweenMoveRage(game.Players.LocalPlayer.Character, CFrame.new(RootPart.CFrame.X, workspace.Effects.Water.Position.Y, RootPart.CFrame.Z) * CFrame.Angles(math.rad(90),0,0), true)
                                        end
                                    end
                                end
                            else
                                if ((NPC_To_Kill ~= nil and workspace.NPCs:FindFirstChild(NPC_To_Kill) and workspace.NPCs:FindFirstChild(NPC_To_Kill):FindFirstChildWhichIsA("Humanoid") and workspace.NPCs:FindFirstChild(NPC_To_Kill).Humanoid.Health <=0) or NPC_To_Kill == nil) and game.Players.LocalPlayer.Character ~= nil and
                                workspace.CurrentCamera.CameraSubject ~= game.Players.LocalPlayer.Character.Humanoid then
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position) * CFrame.new(0, 50, 0)
                                end
                            end
                        end
                    end
                end
            end
        end)

        local VirtualUser = game:service'VirtualUser'
        game:service'Players'.LocalPlayer.Idled:connect(function()
            if settings.AntiAfk then
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
            end
        end)

        local Clip = true
        local function NoclipLoop()
            if Clip == false and game:GetService("Players").LocalPlayer.Character ~= nil then
                --[[for _, child in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
                    if child:IsA("BasePart") and child.CanCollide == true then
                        child.CanCollide = false
                    end
                end]]
                pcall(function()
                    game:GetService("Players").LocalPlayer.Character.Humanoid:ChangeState(11)
                end)
            end
        end
        Noclipping = game:GetService('RunService').Stepped:connect(NoclipLoop)


        local function doQuest()
            repeat wait() until game.Players.LocalPlayer.Character ~= nil
            if farmQuest then
                for i,v in pairs(NPCs_Quests) do
                    --[[print'-----------------------'
                    warn(i, "\n--Type: ", v.QuestInfo.Type, "\n--MobName: ", v.QuestInfo.MobName)
                    print'-----------------------']]
                
                    if i == settings.SelectedQuestHolderName then
                        local NPCModel =  workspace.NPCs:FindFirstChild(i)
                        if not workspace.NPCs:FindFirstChild(i) then
                            library:notify("Autofarm", "Could not find "..i.."!\nPlease go to the island this NPC is at!", 15)
                            
                            if not settings.riskyTeleportForQuest then
                                warn'risko no existo'
                                return
                            end
                        end
                        local pChar = game.Players.LocalPlayer.Character
                        if NPCModel ~= nil and NPCModel.Parent ~= game.ReplicatedStorage.NPCCache then
                            tweenMoveRage(game.Players.LocalPlayer.Character, NPCModel.PrimaryPart.CFrame * CFrame.new(0,-settings.distBelowNpc,0) * CFrame.Angles(math.rad(90),0,0), true)
                        else
                            if settings.riskyTeleportForQuest and game.ReplicatedStorage.NPCCache:FindFirstChild(i) then
                                library:notify("Autofarm", "found npc in cache, teleporting", 5)
                                NPCModel = game.ReplicatedStorage.NPCCache:FindFirstChild(i)
                                
                                for i,v in pairs(islandNamesReal) do
                                        
                                    local pos1 = NPCModel.HumanoidRootPart.Position
                                    local pos2 = v.p
                                    if (pos1 - pos2).magnitude < 500 then
                                        setSpawn(v.Name)
                                        repeat wait() until game.Players.LocalPlayer.Character ~= nil
                                        return doQuest()
                                    end
                                end
                            end
                        end
                        library:notify("Autofarm", "Grabbing quest", 15)
                        --game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.NPCs[i].PrimaryPart.CFrame
                        repeat 
                                game:GetService("ReplicatedStorage").Events.Quest:InvokeServer({"takequest", v.QuestName})
                                wait(0.5)
                        until
                                game.ReplicatedStorage["Stats"..game.Players.LocalPlayer.Name].Quest.CurrentQuest.Value ~= "None"
                        Clip = true -- true = clipping, false = noclipping
                        if workspace.NPCs:FindFirstChild(v.QuestInfo.MobName) then
                                Clip = false -- true = clipping, false = noclipping
                                library:notify("Autofarm", "Killing NPC", 15)
                                NPC_To_Kill = v.QuestInfo.MobName
                            else 
                                Clip = true -- true = clipping, false = noclipping
                                library:notify("Autofarm", "Waiting for NPC to spawn", 15)
                                repeat wait() until workspace.NPCs:FindFirstChild(v.QuestInfo.MobName)
                                if farmQuest then
                                    return doQuest()
                                end
                            end
                        repeat wait() until game.ReplicatedStorage["Stats"..game.Players.LocalPlayer.Name].Quest.CurrentQuest.Value == "None"
                        NPC_To_Kill = nil
                        if farmQuest then
                            return doQuest()
                        end
                    end
                end
            end
        end

        

        local last = 1
        game:GetService("RunService").RenderStepped:Connect(function()

            if settings.runspdMod then
                local UserInputService = game:GetService("UserInputService")
                pcall(function()
                    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = settings.runSpeed
                end)
            end

            if settings.HakiFarm then
                if game:GetService("ReplicatedStorage")["Stats"..game.Players.LocalPlayer.Name].Stats:FindFirstChild("BusoMastery") then
                    local busoBar = game:GetService("ReplicatedStorage")["Stats"..game.Players.LocalPlayer.Name].BusoBar
                    if busoBar.Value == busoBar.MaxValue and busoBar.MaxValue > 100 then
                        game:GetService("ReplicatedStorage").Events.Haki:FireServer("Buso")
                    end
                end
            end

            if settings.NoFallDamage then
                if game.Players.LocalPlayer.Character ~= nil then
                    if game.Players.LocalPlayer.Character:FindFirstChild("FallDamage") then
                        game.Players.LocalPlayer.Character:FindFirstChild("FallDamage"):Destroy()
                    end
                end
            end

            local shp = workspace.Ships:FindFirstChild(game.Players.LocalPlayer.Name.."Ship")
            if shp and shp:FindFirstChild("shipHP") and shp:FindFirstChild("Info") and shp.Info.ready.Value == true then
                shp.shipHP.Value = shp.shipHP.MaxValue
            end 

            if farmShip then
                settings.WalkOnWater = true
                if not workspace.Ships:FindFirstChild(game.Players.LocalPlayer.Name.."Ship") then
                    if game.Players.LocalPlayer.Character then
                        spawn(function()
                            game:GetService("ReplicatedStorage").Events.ShipEvents.Spawn:InvokeServer()
                        end)
                    end
                end

                for i,v in pairs(workspace.NPCs:GetChildren()) do
                    if v.Name:find("Captain") then
                        if game.Players.LocalPlayer.Character then
                            if (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude < 1000 then
                                NPC_To_Kill = v.Name
                            end
                        end
                    end
                end

                if farmShip and tostring(NPC_To_Kill):find("Captain") then
                    Clip = false -- true = clipping, false = noclipping
                elseif farmShip then
                    Clip = true -- true = clipping, false = noclipping
                end
            end

            spawn(function()
                if farmQuest or farmShip or settings.KillAura then
                    if game.Players.LocalPlayer.Character ~= nil then
                        for ia, va in pairs(getclosest(settings.KillAura or farmShip)) do
                            local RootPart = va:FindFirstChild("HumanoidRootPart")
                            
                            if RootPart ~= nil and RootPart.Parent then
                                spawn(function()
                                    if last > 3 then 
                                        last = 1 
                                    end
                                    local tool = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
                                    if not tool then
                                        local pack = game.Players.LocalPlayer.Backpack
                                        local firstWep = game:GetService("HttpService"):JSONDecode(game.ReplicatedStorage["Stats"..game.Players.LocalPlayer.Name].Inventory.BackpackOrder.Value)[1]
                                        if firstWep ~= nil then
                                            for i,v in pairs(pack:children'') do
                                                if v:IsA("Tool") and v:FindFirstChild("Main") and tool == nil and v.Name == firstWep then
                                                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                                                    tool = v
                                                end
                                            end
                                        else
                                            for i,v in pairs(pack:children'') do
                                                if v:IsA("Tool") and v:FindFirstChild("Main") and tool == nil then
                                                    game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                                                    tool = v
                                                end
                                            end
                                        end
                                    end
                                    if tool then
                                        local katanaTypes = require(game.ReplicatedStorage.Modules.SwordHandle.SwordInfo)
                                        if katanaTypes[tool.Name] then
                                            type_t = "Sword"
                                        elseif tool.Name == "Melee" or tool.Name == "BlackLeg" or tool.Name == "FishmanKarate" or tool.Name == "Rokushiki" or tool.Name == "Electro" then
                                            type_t = "Melee"
                                        else
                                            type_t = "Melee"
                                        end
                                        game.ReplicatedStorage.Events.CombatRegister:InvokeServer({"damage", RootPart, type_t, {last, "Ground", type_t}})
                                        last = last + 1
                                    end
                                end)
                            end

                        end
                    end
                end
            end)

            spawn(function()
                if settings.PlayerKillAura then
                    if game.Players.LocalPlayer.Character ~= nil then
                        for ia, va in pairs(getclosestPlayer()) do
                            local RootPart = va:FindFirstChild("HumanoidRootPart")
                            
                            if RootPart ~= nil and RootPart.Parent then
                                spawn(function()
                                    print(RootPart.Parent)
                                    if last > 3 then 
                                        last = 1 
                                    end
                                    local tool = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool")
                                    if not tool then
                                        local pack = game.Players.LocalPlayer.Backpack
                                        local firstWep = game:GetService("HttpService"):JSONDecode(game.ReplicatedStorage["Stats"..game.Players.LocalPlayer.Name].Inventory.BackpackOrder.Value)[1]
                                        for i,v in pairs(pack:children'') do
                                            if v:IsA("Tool") and v:FindFirstChild("Main") and tool == nil and v.Name == firstWep then
                                                game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                                                tool = v
                                            end
                                        end
                                    end
                                    if tool then
                                        local katanaTypes = require(game.ReplicatedStorage.Modules.SwordHandle.SwordInfo)
                                        if katanaTypes[tool.Name] then
                                            type_t = "Sword"
                                        elseif tool.Name == "Melee" or tool.Name == "BlackLeg" or tool.Name == "FishmanKarate" or tool.Name == "Rokushiki" or tool.Name == "Electro" then
                                            type_t = "Melee"
                                        else
                                            type_t = "Melee"
                                        end
                                        game.ReplicatedStorage.Events.CombatRegister:InvokeServer({"damage", RootPart, type_t, {last, "Ground", type_t}})
                                        last = last + 1
                                    end
                                end)
                            end
    
                        end
                    end
                end
            end)
         end)

        local main = library:createWindow("not hattori")
        local tab1 = main:newTab("Main")

        tab1:toggle("Autofarm Quest", {
            location = nil;
            flag = "farmQuest";
            default = farmQuest;
        }, false, {}, function(state) 
            farmQuest = state

            if state then
                Clip = false
                spawn(function()
                    doQuest()
                end)
            else
                Clip = true
            end

            savedsettings:save("GPO", settings)
        end)

        tab1:toggle("Autofarm Ship", {
            location = nil;
            flag = "farmShip";
            default = farmShip;
        }, false, {}, function(state) 
            farmShip = state

            savedsettings:save("GPO", settings)
        end)

        tab1:toggle("KillAura", {
            location = nil;
            flag = "KillAura";
            default = settings.KillAura;
        }, false, {}, function(state) 
            settings.KillAura = state

            savedsettings:save("GPO", settings)
        end)

        tab1:toggle("Player KillAura", {
            location = nil;
            flag = "PlayerKillAura";
            default = settings.PlayerKillAura;
        }, false, {}, function(state) 
            settings.PlayerKillAura = state
            
            savedsettings:save("GPO", settings)
        end)

        local defQuestNames = {}
        for i,v in pairs(NPCs_Quests) do
            if v.QuestInfo.Type == 'Defeat' then
                table.insert(defQuestNames, {Name = v.QuestDesc})
            end
        end

        tab1:dropdown("Selected Quest", false, {
            location = nil;
            flag = "SelectedQuest";
            list = defQuestNames;
            default = settings.SelectedQuest;
        }, function(v) 
            settings.SelectedQuest = (v) 

            for i2,v2 in pairs(NPCs_Quests) do
                if v2.QuestDesc == v then
                    settings.SelectedQuestHolderName = tostring(v2.NPC)
                end
            end

            savedsettings:save("GPO", settings)
        end)

        tab1:slider("Dist Below NPC", {
            location = nil;
            flag = "distBelowNpc";
            min = 1;
            max = 15;
            default = settings.distBelowNpc;
        }, function(v) settings.distBelowNpc = v savedsettings:save("GPO", settings) end, false, {})

        tab1:toggle("Stay Underground", {
            location = nil;
            flag = "stayUnderGround";
            default = settings.stayUnderGround;
        }, false, {}, function(state) 
            settings.stayUnderGround = state

            savedsettings:save("GPO", settings)
        end)

        tab1:toggle("Anti-AFK", {
            location = nil;
            flag = "AntiAfk";
            default = settings.AntiAfk;
        }, false, {}, function(state) 
            settings.AntiAfk = state

            savedsettings:save("GPO", settings)
        end)

        --[[tab1:textbox("Goto PS", {}, function(code)
            game:GetService("ReplicatedStorage").Events.reserved:InvokeServer(code)

            savedsettings:save("GPO", settings)
        end)]]

        tab2:toggle("Always day", {
            location = nil;
            flag = "alwaysDay";
            default = settings.alwaysDay;
        }, false, {}, function(state) 
            settings.alwaysDay = state

            for i,v in pairs(workspace.Islands:GetChildren()) do
                if settings.alwaysDay then
                    v.Settings.Weather.Value = "Normal" 
                end
            end

            savedsettings:save("GPO", settings)
        end)

        local tab3 = main:newTab("Character")

        tab3:slider("Run speed modifier", {
            location = nil;
            flag = "runSpeed";
            min = 16;
            max = 120;
            default = settings.runSpeed;
        }, function(state) settings.runSpeed = state end, true, {
            location = nil;
            flag = "runspdMod";
            default = settings.runspdMod;
            callback = function(state) settings.runspdMod = state end;
        })

        tab3:toggle("Haki farm", {
            location = nil;
            flag = "HakiFarm";
            default = settings.HakiFarm;
        }, false, {}, function(state) 
            settings.HakiFarm = state

            savedsettings:save("GPO", settings)
        end)

        tab3:toggle("Walk on water", {
            location = nil;
            flag = "WalkOnWater";
            default = settings.WalkOnWater;
        }, false, {}, function(state) 
            settings.WalkOnWater = state

            local stats = game.ReplicatedStorage["Stats"..game.Players.LocalPlayer.Name].Stats

            _G.ActualDF = _G.ActualDF or stats.DF.Value

            stats.DF.Value = (state and "Hie-Hie") or _G.ActualDF

            pcall(function()
                game.Players.LocalPlayer.Backpack.WaterLogia.Disabled = true
                game.Players.LocalPlayer.Backpack.WaterLogia.Disabled = false
            end)

            savedsettings:save("GPO", settings)
        end)

        tab3:toggle("Anti Drown", {
            location = nil;
            flag = "AntiDrown";
            default = settings.AntiDrown;
        }, false, {}, function(state) 
            settings.AntiDrown = state

            savedsettings:save("GPO", settings)
        end)

        tab3:toggle("No fall damage", {
            location = nil;
            flag = "NoFallDamage";
            default = settings.NoFallDamage;
        }, false, {}, function(state) 
            settings.NoFallDamage = state

            savedsettings:save("GPO", settings)
        end)

        tab3:toggle("Infinite (normal) Dodge", {
            location = nil;
            flag = "NoDodgeStam";
            default = settings.NoDodgeStam;
        }, false, {}, function(state) 
            settings.NoDodgeStam = state

            savedsettings:save("GPO", settings)
        end)

        tab3:dropdown("Island Teleport", false, {
            location = nil;
            flag = "SelectedQuest";
            list = {
                {Name = "Sandora"},
                {Name = "Colosseum"},
                {Name = "Island Of Zou"},
                {Name = "Sphinx Island"},
                {Name = "Arlong Park"},
                {Name = "Restaurant Baratie"},
                {Name = "Town of Beginnings"},
                {Name = "Shell's Town"}
            };
            default = "Island Teleport";
        }, function(v) 
            if v ~= "Island Teleport" then
                setSpawn(v)
            end
        end)

        tab3:button("Respawn", function() 
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(20000000000,20000000000,20000000000) 
        end)



        local tab41 = main:newTab("Ships")
        
        tab41:button("Set Settings",  function() 
            for i,v in pairs(getreg()) do
                if type(v) == 'function' and islclosure(v) and not is_synapse_function(v) then
                    for a,c in pairs(getupvalues(v)) do
                        if type(c) == 'table' and rawget(c, "Accel") then
                            c.Accel = settings.shipSettings.Speed
                            local shp = workspace.Ships:FindFirstChild(game.Players.LocalPlayer.Name.."Ship")
                            if shp then
                                local shp = require(shp.Info.Settings)
                                if shp.Type == "Rowboat" and settings.shipSettings.MaxSpeed > 65 then
                                    settings.shipSettings.MaxSpeed = 65
                                    c.MaxSpeed =  65
                                elseif shp.Type == "Caravel" and settings.shipSettings.MaxSpeed > 85 then
                                    settings.shipSettings.MaxSpeed = 85
                                    c.MaxSpeed =  85
                                elseif shp.Type == "Brig" and settings.shipSettings.MaxSpeed > 105 then
                                    settings.shipSettings.MaxSpeed = 105
                                    c.MaxSpeed =  105
                                end
                            end
                            c.Brake = settings.shipSettings.Brake
                            c.RotateAngle = settings.shipSettings.RotateSpeed/100
                        end
                    end
                end
            end
        end)

        tab41:toggle("Anti Collision Damage", {
            location = nil;
            flag = "AntiCollisionDamage";
            default = settings.shipSettings.AntiCollisionDamage;
        }, false, {}, function(state) 
            settings.shipSettings.AntiCollisionDamage = state

            savedsettings:save("GPO", settings)
        end)

        tab41:slider("Ship Acceleration", {
            location = nil;
            flag = "Speed";
            min = 1;
            max = 30;
            default = settings.shipSettings.Speed;
        }, function(v) 
            settings.shipSettings.Speed = v 
            savedsettings:save("GPO", settings) 
        end, false, {})

        tab41:slider("Ship Height", {
            location = nil;
            flag = "Speed";
            min = -17;
            max = 17;
            default = settings.shipSettings.Height;
        }, function(v) 
            settings.shipSettings.Height = v 

            local shp = workspace.Ships:FindFirstChild(game.Players.LocalPlayer.Name.."Ship")
            if shp then
                if shp:FindFirstChild("m") and shp.m:FindFirstChild("BodyPosition") then
                    shp.m.BodyPosition.Position = Vector3.new(0, v or 23, 0)
                end
            end

            savedsettings:save("GPO", settings) 
        end, false, {})

        tab41:slider("Ship MaxSpeed", {
            location = nil;
            flag = "MaxSpeed";
            min = 1;
            max = 105;
            default = settings.shipSettings.MaxSpeed;
        }, function(v) 
            settings.shipSettings.MaxSpeed = v 
            savedsettings:save("GPO", settings) 
        end, false, {})

        tab41:slider("Ship Brake Speed", {
            location = nil;
            flag = "Brake";
            min = 1;
            max = 30;
            default = settings.shipSettings.Brake;
        }, function(v) 
            settings.shipSettings.Brake = v 
            savedsettings:save("GPO", settings) 
        end, false, {})

        tab41:slider("Ship RotateSpeed", {
            location = nil;
            flag = "RotateSpeed";
            min = 1;
            max = 10;
            default = settings.shipSettings.RotateSpeed;
        }, function(v) 
            settings.shipSettings.RotateSpeed = v 
            savedsettings:save("GPO", settings) 
        end, false, {})

        tab1.spFuncs:SimClck()










    elseif v == 4616652839 then -- // Shindo life ID
        --// SL2

        local settings = savedsettings:load("SL2", {
            resetAfterSpin = false;
            resetAfterSpinAmount = 79;
            autoaim_Projectiles = false;
            AntiAfk = true;
            StopWhenScroll = true;
            autoPrestige = false;
            canKillNPC = true;
            shouldNoClip = false;
            bossOnly = false;
            distUnderNPC = 0;
            killaura_Enabled = false;
            sniper_Enabled = false;
            autokill_Jins = false;
            PublicHopMethod2 = false;
            messageOnModJoin = false;
            kickOnModJoin = false;
            includeTesterAsMod = false;
            untilBossSpawns = false;
            untilRound = 21;
            killaura_Enabled2 = false;
            autofarm_Enabled = false;
            rejoinAfterAllQuests = false;
            killauraRange = 30000;
            waitTimeKillaura = 3;
            runSpeed = 30;
            runspdMod = false;
            autoReset = false; 
            ResetAfter = 21;
            untilRound = 19;
            Chakra = false;
            Level = false;
            Mode = false;
            Health = false;
            BoxOutline = false;
            Tracers = false;
            TextOutline = false;
            espFontSize = 12;
            Nametag = false;
            TeamCheck = false;
            UniversalEsp = {
                ["Team ESP Color"] = {255/255, 100/255, 100/255};
                ["Team ESP Color"] = {0, 245/255, 0};
                ["Visible ESP Color"] = {50/255,100/255,255/255};
            };
            kgsroll = {
                slot1 = false;
                slot2 = false;
                slot3 = false;
                slot4 = false;
            };
            kgspicked = {
                sharingan = false;
                boil = false;
                crystal = false;
                dust = false;
                explosion = false;
                sand = false;
                ice	= false;
                golddust = false;
                scorch = false;
                lava = false;
                ironsand = false;
                wood = false;
                mud	= false;
                storm = false;
                byakugan = false;
                ketsuryugan	= false;
                kaguya = false;
                namikaze = false;
                sarutobi = false;
                uzumaki	= false;
                shirogane = false;
                nara = false;
                hoshigaki = false;
                senjuwood = false;
                yukiice	= false;
                kamizuru = false;
                rinnegan = false;
                blacklightning = false;
                clay = false;
                itachisharingan	= false;
                obitosharingan	= false;
                inuzuka	= false;
                jashin	= false;
                paper = false;
                akimichi = false;
            };
            staffdetecs = {
                notif = false;
                skick = false;
                inctest = false;
            };
            SelectableVillages = {
                Leaf = 4601350214,
                Rock = 4601350809,
                Cloud = 4601350656,
                Mist = 4601350760,
                Sand = 4601350394,
                TrainingGrounds = 5431071837,
                ForestOfDeath = 5447073001,
                Rain = 5084678830,
                Akatsuki = 5431069982,
            };
            SelectableVillages2 = {
                Leaf = 4601350214,
                Rock = 4601350809,
                Cloud = 4601350656,
                Mist = 4601350760,
                Sand = 4601350394,
                TrainingGrounds = 5431071837,
                ForestOfDeath = 5447073001,
                Rain = 5084678830,
                Akatsuki = 5431069982,
            };
            spawnSets = {
                SelectedVillage = "Leaf",
                JinSpawn = false,
                WeaponSpawn = false,
                ModeSpawn = false,
                SubSpawn = false,
                cachedServers = {[game.JobId] = true},
            };
            autofarmCandy_Enabled = false;
            newServerAfterTimer = false;
            timerMaxForCandy = 10;
        })

        repeat wait() until game.Loaded
        repeat wait() until game.Players.LocalPlayer:FindFirstChild("startevent")
        local char = game.Players.LocalPlayer.Character


        local isReady2 = true

        local uniData = game:service'HttpService':JSONDecode(game:HttpGet("https://games.roblox.com/v1/games?universeIds=1511883870")).data[1]
        --table.foreach(uniData, warn)
        local lastUpdated = "2020-11-07T19:00:57.4354083Z"
        local currentUpdated = uniData.updated

        if lastUpdated == currentUpdated then
            isReady2 = true
        else
            game.StarterGui:SetCore("SendNotification", {
                Title = "!! WARNING !!"; 
                Text = "The game has updated, please be cautious or wait until Hattori updates!";
                Duration = 500; 
            })
        end

        repeat wait() until isReady2
        repeat wait() until game.Players.LocalPlayer.PlayerGui:FindFirstChild("Main")

        game:getService("RunService"):UnbindFromRenderStep("noclOppl")
        game:getService("RunService"):BindToRenderStep("noclOppl",0,function()
            pcall(function()
                local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
                if settings.shouldNoClip then
                    pcall(function()
                        local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
                        char.Humanoid:ChangeState(11)
                    end)
                elseif char.Humanoid:GetState() == 11 then
                    pcall(function()
                        local char = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
                        char.Humanoid:ChangeState(1)
                    end)
                end
            end)
        end)

        --[[
        if workspace:FindFirstChild("CCoff") then
            workspace:FindFirstChild("CCoff"):Destroy()
        end
        workspace.ChildAdded:Connect(function(p)
            if p.Name == "CCoff" then
                p:Destroy()
            end
        end)


        local old
        setreadonly(getrenv().table, false)
        old = hookfunction(getrenv().table.insert, function(tab, ...)
            if #tab == 1 and not checkcaller() then
                for i,v in pairs(tab) do
                    if typeof(v) == 'Vector3' or typeof(v) == 'CFrame' then
                        return
                    end
                end
            end
            
            return old(tab, ...)
        end)
        setreadonly(getrenv().table, true)

        ]]








        local function getMissionGiverData(npc)
            local toReturn = {
                Enabled = false;
            }
            local deafeatQuestImage = "http://www.roblox.com/asset/?id=5459241648";
            local companionQuestImage = "http://www.roblox.com/asset/?id=5459241799";

            if npc and npc:FindFirstChild("Head") and npc.Head.givemission.Enabled == true then
                local missionImage = npc.Head.givemission.color.Image
                if missionImage == deafeatQuestImage then
                    toReturn.Type = "defeat"
                end
                if missionImage == companionQuestImage then
                    toReturn.Type = "companion"
                end
                
            end

            return toReturn
        end

        local function cancelQuest()
            local chatbox = game.Players.LocalPlayer.PlayerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar 

            chatbox.Text = [[!cancel]]

            for i,v in pairs(getconnections(chatbox.FocusLost)) do
                v.Function(true)
            end
        end

        --[[local mt = getrawmetatable(game)
        local namecall = mt.__namecall
        local setreadonly = setreadonly or make_writable


        setreadonly(mt, false)

        mt.__namecall = newcclosure(function(self, ...)
            local args = {...}
            local arguments = args
            local a = {}
            for i = 1, #arguments - 1 do
                a[i] = arguments[i]
            end
            local method = getnamecallmethod()

            if method == 'FireServer' then
                for a,c in pairs(args) do
                    if tostring(c):find("!name a") then
                        return
                    end
                    if tostring(c):find("!name N/A") then
                        return
                    end
                    if tostring(c):find("!cancel") then
                        return
                    end
                end
            end
            
            return namecall(self, ...)    
        end)

        setreadonly(mt, true)]]

        local toKillNPCs = workspace:FindFirstChild("npc")
        local missiongivers = workspace:FindFirstChild("missiongivers")
        local autofarmDat = {
            GotQuest = nil;
            MissionGiver = nil;
            Objective = nil;
            KillingNPCs = false;
            QuestFinished = false;
        }

        local function resetQuestDat()
            autofarmDat = {
                GettingQuest = false;
                GotQuest = nil;
                MissionGiver = nil;
                Objective = nil;
                KillingNPCs = false;
                QuestFinished = false;
            }
        end

        if workspace:FindFirstChild("CCoff") then
            workspace:FindFirstChild("CCoff"):Destroy()
        end
        workspace.ChildAdded:Connect(function(p)
            if p.Name == "CCoff" then
                p:Destroy()
            end
        end)


        local old
        setreadonly(getrenv().table, false)
        old = hookfunction(getrenv().table.insert, function(tab, ...)
            if #tab == 1 and not checkcaller() then
                for i,v in pairs(tab) do
                    if typeof(v) == 'Vector3' or typeof(v) == 'CFrame' then
                        return
                    end
                end
            end
            
            return old(tab, ...)
        end)
        setreadonly(getrenv().table, true)

        function createPS(Place)
            game:GetService("Players").LocalPlayer.startevent:FireServer("createprivateserver", settings.SelectableVillages[Place])
        end

        local alreadyPsHopping = false
        function ps_Hop()
            if alreadyPsHopping == false then
                ownsGP = game.Players.LocalPlayer.gamepasses:FindFirstChild("privateservers")
                if ownsGP then
                    if settings.spawnSets.WeaponSpawn or settings.spawnSets.ModeSpawn or settings.spawnSets.JinSpawn or settings.spawnSets.SubSpawn then
                        codeWhenHopping = "_G.ServerHop = true".."\n"..codeWhenHopping
                    end
                    savedsettings:save("SL2", settings)
                    alreadyPsHopping = true
                    hasCalled = true
                    syn.queue_on_teleport(codeWhenHopping)
                    warn(codeWhenHopping)
                    createPS(settings.spawnSets.SelectedVillage)
                elseif _G.PubCodeHop then
                    local code = _G.PubCodeHopCode
                    if workspace:FindFirstChild("playerps") or game.PlaceId ~= settings.SelectableVillages2[Place] then

                        codeWhenHopping = "_G.PubCodeHop = true\n".."_G.PubCodeHopCode = "..tostring(_G.PubCodeHopCode).."\n"..codeWhenHopping
                        savedsettings:save("SL2", settings)
                        alreadyPsHopping = true
                        hasCalled = true
                        syn.queue_on_teleport(codeWhenHopping)
                        game.Players.LocalPlayer.startevent:FireServer("rpgteleport", settings.SelectableVillages2[Place]);
                    elseif not workspace:FindFirstChild("playerps") and game.PlaceId ~= settings.SelectableVillages2[Place] then

                        codeWhenHopping = "_G.PubCodeHop = true\n".."_G.PubCodeHopCode = "..tostring(_G.PubCodeHopCode).."\n"..codeWhenHopping
                        savedsettings:save("SL2", settings)
                        alreadyPsHopping = true
                        hasCalled = true
                        syn.queue_on_teleport(codeWhenHopping)
                        TPEvent:FireServer("teleporttoprivate", _G.PubCodeHopCode)
                    end
                else
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "PS-Hopper"; 
                        Text = "Sorry, you must own the 'Private Servers' gamepass!";
                        Duration = 5; 
                    })
                end
            end
        end
        spawn(function()
            wait(2)
            repeat wait() until game.Players.LocalPlayer.PlayerGui:FindFirstChild("Main") ~= nil
            repeat wait() until game.Players.LocalPlayer.PlayerGui.Main:FindFirstChild("esttime") ~= nil
            repeat wait() until game.Players.LocalPlayer.PlayerGui:FindFirstChild("Main"):FindFirstChild("esttime").Text:find("EST")
            local kgs = game.Players.LocalPlayer.statz.main
            kgs.DescendantAdded:Connect(function(s)
                if s.Name:find("dontspin") then
                    repeat wait() if s then
                        s:Destroy()
                    end
                until
                    s == nil
                end
            end)
            foundJin = false
            foundMode = false
            foundWep = false
            foundSub = false

            if settings.spawnSets.JinSpawn then
                repeat wait() until workspace:findFirstChild("npc")
                for i,v in pairs(workspace.GLOBALTIME:children'') do
                    if v:FindFirstChild("sh") and v:FindFirstChild("boss") then
                        foundJin = true
                    end
                end
            end
            if settings.spawnSets.ModeSpawn then
                repeat wait() until workspace:findFirstChild("GLOBALTIME")
                for i,v in pairs(workspace.GLOBALTIME:children'') do
                    if v:FindFirstChild("sh") then
                        if game.ReplicatedStorage.alljutsu.modes:FindFirstChild(v.Name) then
                            foundMode = true
                        end
                    end
                end
            end
            if settings.spawnSets.WeaponSpawn then
                repeat wait() until workspace:findFirstChild("GLOBALTIME")
                for i,v in pairs(workspace.GLOBALTIME:children'') do
                    if v:FindFirstChild("sh") then
                        if game.ReplicatedStorage.blades:FindFirstChild(v.Name) then
                            foundWep = true
                        end
                    end
                end
            end
            if settings.spawnSets.SubSpawn then
                repeat wait() until workspace:findFirstChild("GLOBALTIME")
                for i,v in pairs(workspace.GLOBALTIME:children'') do
                    if v:FindFirstChild("sh") then
                        if game.ReplicatedStorage.alljutsu.Acharacterpowers:FindFirstChild(v.Name) or game.ReplicatedStorage.alljutsu.taijutsu:FindFirstChild(v.Name) then
                            foundSub = true
                        end
                    end
                end
            end
            spawn(function()
                if not _G.ServerHop then
                    repeat wait() until _G.ServerHop
                end
                if settings.spawnSets.WeaponSpawn or settings.spawnSets.ModeSpawn or settings.spawnSets.JinSpawn or settings.spawnSets.SubSpawn then
                    --if (settings.StopWhenScroll == true and foundWep == false and foundMode == false and foundJin == false and foundSub == false) or not settings.StopWhenScroll then
                    if foundWep == false and foundMode == false and foundJin == false and foundSub == false then
                        if _G.ServerHop then
                            ps_Hop()
                        end
                    end
                end
            end)
        end)

        local lobby = 4616652839
        function createPubS(Place, samePlace, isLobby)
            if game.PlaceId ~= settings.SelectableVillages2[Place] and not isLobby then
                game.Players.LocalPlayer.startevent:FireServer("rpgteleport", settings.SelectableVillages2[Place]);
            else
                if not settings.PublicHopMethod2 then
                    local url = 'https://games.roblox.com/v1/games/%s/servers/public?cursor=%s'
                    local cursor = ""

                    game.StarterGui:SetCore("SendNotification", {
                        Title = "Server-Hopper"; 
                        Text = "Attempting to hop servers..";
                        Duration = 5; 
                    })

                    local hasTried = false
                    
                    while wait(0.1) do
                        local response = game:HttpGet(url:format(game.PlaceId, cursor))
                        local decoded = HttpService:JSONDecode(response)
                        
                        for i, server in next, decoded.data do
                            if server.playing < server.maxPlayers then
                                settings.spawnSets.cachedServers[server.id] = true
                                wait()
                                savedsettings:save("SL2", settings)
                                wait()
                                warn'ACTUALLY TELEPORTING??'
                                game:GetService'TeleportService':TeleportToPlaceInstance(game.PlaceId, server.id, game.Players.LocalPlayer)
                                if not hasTried then 
                                    hasTried = true
                                    game.StarterGui:SetCore("SendNotification", {
                                        Title = "Server-Hopper"; 
                                        Text = "Teleporting!";
                                        Duration = 5; 
                                    })
                                end
                                wait(9e9)
                            end
                        end
                        
                        if not decoded.nextPageCursor then
                            break
                        end

                        cursor = decoded.nextPageCursor;
                    end
                else
                    print'Method2..FUCK'
                    if samePlace then
                        savedsettings:save("SL2", settings)
                        game.Players.LocalPlayer.startevent:FireServer("rpgteleport", lobby);
                    else
                        savedsettings:save("SL2", settings)
                        game.Players.LocalPlayer.startevent:FireServer("rpgteleport", settings.SelectableVillages2[Place]);
                    end

                end
            end
        end
        local alreadyPubHopping = false
        function pub_Hop()
            if alreadyPubHopping == false then
                if settings.spawnSets.WeaponSpawn or settings.spawnSets.ModeSpawn or settings.spawnSets.JinSpawn or settings.spawnSets.SubSpawn then
                    codeWhenHopping = "_G.ServerHopPublic1 = true\n"..codeWhenHopping
                    hasCalled = true
                    syn.queue_on_teleport(codeWhenHopping)
                    if settings.PublicHopMethod2 and game.PlaceId == settings.SelectableVillages2[settings.spawnSets.SelectedVillage] then
                        savedsettings:save("SL2", settings)
                        alreadyPubHopping = true
                        createPubS(lobby, true)
                    end
                end
                alreadyPubHopping = true
                createPubS(settings.spawnSets.SelectedVillage)
            end
        end
        --[[
        spawn(function()
            repeat wait() until game.Players.LocalPlayer.Character
            wait(5)
            local timerFoundCandy = 0
            while wait() do
                if settings.autofarmCandy_Enabled then
                    for i, npc in pairs(Workspace.missiongivers:GetChildren()) do
                        if npc and npc:FindFirstChild("Talk") then
                            if npc.Talk.typ.Value == "halloweenevent" and npc:FindFirstChild("CLIENTTALK") and npc.Head.givemission.Enabled == true then
                                timerFoundCandy = 0
                                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = npc.HumanoidRootPart.CFrame
                                repeat wait()
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = npc.HumanoidRootPart.CFrame
                                    npc.CLIENTTALK:FireServer()
                                    wait(0.3)
                                    npc.CLIENTTALK:FireServer("accept")
                                    wait(0.3)
                                until
                                    npc == nil or npc.Parent == nil or settings.autofarmCandy_Enabled == false or npc.Head.givemission.Enabled == false
                            end
                        end
                    end
                    timerFoundCandy = timerFoundCandy + 0.04
                    
                    if settings.newServerAfterTimer then
                        if settings.timerMaxForCandy <= timerFoundCandy then
                            settings.autofarmCandy_Enabled = false
                            for i,v in pairs (settings.SelectableVillages) do
                                if v == game.PlaceId then
                                    settings.SelectedVillage = settings.SelectableVillages[i]
                                end
                            end
                            if workspace:FindFirstChild("playerps") then
                                ps_Hop()
                            else
                                pub_Hop()
                            end
                        end
                    end
                end
            end
        end)
        ]]
        spawn(function()
            repeat wait() until game.Players.LocalPlayer.Character
            wait(5)
            local questTimer = 0
            while true do
                wait()
                --game:GetService("RunService").RenderStepped:Wait()
                pcall(function()
                    resetQuestDat()

                    if settings.autofarm_Enabled then
                        if not autofarmDat.GotQuest then
                            for index, npc in pairs(missiongivers:GetChildren()) do
                                repeat wait() until game.Players.LocalPlayer.Character
                                local giverdata = getMissionGiverData(npc)
                                wait()
                                if giverdata.Type and npc:FindFirstChild("CLIENTTALK") and (giverdata.Type == "defeat" or (settings.bossOnly and giverdata.Type == "companion" and game.Players.LocalPlayer.statz.lvl.lvl.Value > 700)) then
                                    questTimer = 0
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = npc.HumanoidRootPart.CFrame
                                    repeat wait()
                                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = npc.HumanoidRootPart.CFrame
                                        spawn(function()
                                            npc.CLIENTTALK:FireServer()
                                            wait(0.3)
                                            npc.CLIENTTALK:FireServer("accept")
                                            wait(0.3)
                                        end)
                                    until game.Players.LocalPlayer.PlayerGui.Main.ingame.Missionstory.Visible == true or settings.autofarm_Enabled == false or getMissionGiverData(npc).Type == nil

                                    if game.Players.LocalPlayer.PlayerGui.Main.ingame.Missionstory.Visible then
                                        autofarmDat.GotQuest = game.Players.LocalPlayer.PlayerGui.Target
                                    end
                                end

                                if game.Players.LocalPlayer.PlayerGui:FindFirstChild("Target") then
                                    autofarmDat.KillingNPCs = true
                                    for index, npc in pairs(toKillNPCs:GetChildren()) do
                                        if npc and npc:FindFirstChild("HumanoidRootPart") and npc.Name ~= "logtraining" and game.Players.LocalPlayer.PlayerGui:FindFirstChild("Target") and (npc.HumanoidRootPart.Position - game.Players.LocalPlayer.PlayerGui.Target.Adornee.Position).magnitude < 200 then
                                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.PlayerGui.Target.Adornee.CFrame * CFrame.new(0, 2.5, 0)
                                            spawn(function()
                                                local i = 0
                                                repeat wait(1) 
                                                    i = i + 1 
                                                    if i >= 8 then 
                                                        cancelQuest() 
                                                        resetQuestDat()
                                                    end 
                                                until autofarmDat.KillingNPCs == false or not game.Players.LocalPlayer.PlayerGui:FindFirstChild("Target") or game.Players.LocalPlayer.PlayerGui.Main.ingame.Missionstory.Visible == false or settings.autofarm_Enabled == false
                                            end)
                                            repeat wait()
                                                npc.Humanoid.Health = npc.Humanoid.MaxHealth
                                                wait()
                                                npc.Humanoid.Health = 0
                                            until
                                                npc == nil or npc.Parent == nil or (npc:FindFirstChild'fakehealth' and npc.fakehealth.Value == 0) or autofarmDat.KillingNPCs == false or not game.Players.LocalPlayer.PlayerGui:FindFirstChild("Target") or game.Players.LocalPlayer.PlayerGui.Main.ingame.Missionstory.Visible == false or settings.autofarm_Enabled == false
                                                
                                        end
                                    end
                                    autofarmDat.KillingNPCs = false
                                end
                                if settings.rejoinAfterAllQuests then
                                    questTimer = questTimer + 0.1
                                    
                                    if questTimer >= 10 then
                                        game:GetService("Players").LocalPlayer.startevent:FireServer("createprivateserver", 4601350214)
                                    end
                                end
                            end
                        end
                    end
                end)
            end
        end)

        local function hideName()
            local chatbox = game.Players.LocalPlayer.PlayerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar 

            chatbox.Text = [[!name a 

            ]]

            for i,v in pairs(getconnections(chatbox.FocusLost)) do
                v.Function(true)
            end
        end

        local function showName()
            local chatbox = game.Players.LocalPlayer.PlayerGui.Chat.Frame.ChatBarParentFrame.Frame.BoxFrame.Frame.ChatBar 

            chatbox.Text = [[!name N/A]]

            for i,v in pairs(getconnections(chatbox.FocusLost)) do
                v.Function(true)
            end
        end

        local alreadygot = {}
        local function getAdded(thing)
            local model = nil
            local clickDetector = nil
            local name = ""
            local sh = thing:FindFirstChild("sh")
            if sh then
                local cf = sh.CFrame.p 
                if cf ~= Vector3.new(0, -40000, 0) then
                    model = thing
                    name = model.Name
                    clickDetector = sh:FindFirstChildOfClass("ClickDetector")
                end
                if model and model.Name:find("tentail") then
                    foundBossScroll = true
                end
            end
            if sh and sh:FindFirstChild("invoke") then
                local unlocked = game.Players.LocalPlayer.statz.unlocked
                if not unlocked:FindFirstChild(tostring(name):lower().."scroll") then
                    if not alreadygot[thing] then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = sh.CFrame
                        wait()
                        alreadygot[model] = true
                        game.StarterGui:SetCore("SendNotification", {
                            Title = "Scroll Sniper"; 
                            Text = "Scroll Sniped "..name.."";
                            Duration = 5; 
                        })
                    end
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = sh.CFrame
                    wait()
                    sh.invoke:FireServer(game.Players.LocalPlayer)
                end
            end
            if clickDetector then
                local unlocked = game.Players.LocalPlayer.statz.unlocked
                if not unlocked:FindFirstChild(tostring(name):lower().."scroll") then
                    if not alreadygot[thing] then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = sh.CFrame
                        wait()
                        alreadygot[model] = true
                        game.StarterGui:SetCore("SendNotification", {
                            Title = "Scroll Sniper"; 
                            Text = "Scroll Sniped "..name.."";
                            Duration = 5; 
                        })
                    end
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = sh.CFrame
                    wait()
                    fireclickdetector(clickDetector)
                end
            end
        end

        spawn(function()
            while true do
                game:GetService("RunService").RenderStepped:Wait()

                setsimulationradius(900000)

                pcall(function()
                    spawn(function()
                        if settings.autoaim_Projectiles then

                            local projp = workspace.projectileparent
                            local ms = projp:FindFirstChild(game.Players.LocalPlayer.Name.."mouse")

                            local target = getClosestPlayerToCursor()
                            if target then 
                                target = target.Character 

                                ms.mous.Position = target.HumanoidRootPart.Position

                            end
                        end
                    end)
                end)

                if settings.killaura_Enabled then
                    pcall(function()
                        for i, npc in pairs(workspace.npc:children'') do
                            if (npc.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude < 30 then
                                spawn(function()
                                    repeat wait()
                                        npc.Humanoid.Health = npc.Humanoid.MaxHealth
                                        wait()
                                        npc.Humanoid.Health = 0
                                    until
                                        npc == nil or npc.Parent == nil or (npc:FindFirstChild'fakehealth' and npc.fakehealth.Value == 0) or settings.killaura_Enabled == false
                                end)
                            end
                        end
                    end)
                end

                if settings.killaura_Enabled2 then
                    pcall(function()
                        for i, npc in pairs(workspace.npc:children'') do
                            if (npc.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude < settings.killauraRange then
                                spawn(function()
                                    wait(waitTimeKillaura)
                                    repeat wait()
                                        npc.Humanoid.Health = npc.Humanoid.MaxHealth
                                        wait()
                                        npc.Humanoid.Health = 0
                                    until
                                        npc == nil or npc.Parent == nil or (npc:FindFirstChild'fakehealth' and npc.fakehealth.Value == 0) or settings.killaura_Enabled2 == false
                                end)
                            end
                        end
                    end)
                end

                if runspdMod then
                    local UserInputService = game:GetService("UserInputService")
                    local shift = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift)
                    if shift then
                        pcall(function()
                            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = runSpeed
                        end)
                    end
                end

                if settings.sniper_Enabled then
                    spawn(function()
                        for i,thing in pairs(workspace:GetChildren'') do
                            getAdded(thing)
                        end
                    end)
                    spawn(function()
                        for i,thing in pairs(workspace.GLOBALTIME:children'') do
                            getAdded(thing)
                        end
                    end)
                end
                if settings.autokill_Jins then
                    pcall(function()
                        spawn(function()
                            for i,thing in pairs(workspace.npc:children'') do
                                if thing:FindFirstChild("megaboss") and thing:FindFirstChild("HumanoidRootPart") and thing.HumanoidRootPart.CFrame.Y > -500 then
                                    local oldSet = settings.autofarm_Enabled
                                    settings.autofarm_Enabled = false
                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = thing.HumanoidRootPart.CFrame
                                    autofarmDat.KillingNPCs = false
                                    autofarmDat.KillingNPCs = true
                                    spawn(function()
                                        local i = 0
                                        repeat wait(1) 
                                            i = i + 1 
                                            if i >= 8 then 
                                                cancelQuest() 
                                                resetQuestDat()
                                            end 
                                        until autofarmDat.KillingNPCs == false or not game.Players.LocalPlayer.PlayerGui:FindFirstChild("Target") or game.Players.LocalPlayer.PlayerGui.Main.ingame.Missionstory.Visible == false or settings.autofarm_Enabled == false
                                    end)
                                    repeat wait()
                                        npc.Humanoid.Health = npc.Humanoid.MaxHealth
                                        wait()
                                        npc.Humanoid.Health = 0
                                    until
                                        npc == nil or npc.Parent == nil or (npc:FindFirstChild'fakehealth' and npc.fakehealth.Value == 0) or autofarmDat.KillingNPCs == false

                                    settings.autofarm_Enabled = oldSet
                                end
                            end
                        end)
                    end)
                end
            end
        end)

        spawn(function()
            while wait(10) do
                if settings.autoPrestige and game.Players.LocalPlayer.statz.lvl.lvl.Value == 1000 then
                    game:GetService("Players").LocalPlayer.startevent:FireServer("rankup")
                end
            end
        end)

        local function rejoinServer()
            game.Players.LocalPlayer.startevent:FireServer("play");
            game.Players.LocalPlayer.startevent:FireServer("rpgteleport", lobby);
        end

        local function godmode()
            pcall(function()
                local old = game.Players.LocalPlayer.Character:FindFirstChild("fakehealth")
                local new = old:Clone()
                new.Parent = old.Parent
                old:Destroy()
                game.Players.LocalPlayer.Character.ChildAdded:Connect(function(s)
                    if s.Name == "stayonground" then
                        s:Destroy()
                    end
                end)
            end)
        end

        local function antigrip()
            for i,s in pairs(game.Players.LocalPlayer.Character:children'') do
                if s.Name == "stayonground" then
                    s:Destroy()
                end
            end
            game.Players.LocalPlayer.Character.ChildAdded:Connect(function(s)
                if s.Name == "stayonground" then
                    s:Destroy()
                end
            end)
            for i,s in pairs(game.Players.LocalPlayer.Character.HumanoidRootPart:children'') do
                if s.Name == "KO" then
                    s:Destroy()
                end
            end
            game.Players.LocalPlayer.Character.HumanoidRootPart.ChildAdded:Connect(function(s)
                if s.Name == "KO" then
                    s:Destroy()
                end
            end)
            spawn(function()
                pcall(function()
                    while game.Players.LocalPlayer.Character do
                        game:GetService'RunService'.RenderStepped:Wait()
                        local chr = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
                        local combat = chr.combat 
                        combat.disable.Value = false
                        combat.canrun.Value = false
                        combat.combat.delayfront.Value = false
                        if combat:FindFirstChild("landed") then
                            combat:FindFirstChild("landed"):Destroy()
                        end
                        if combat:FindFirstChild("attacked") then
                            combat:FindFirstChild("attacked"):Destroy()
                        end
                        if combat:FindFirstChild("slowdown") then
                            combat:FindFirstChild("slowdown"):Destroy()
                        end
                        if combat:FindFirstChild("nowalk") then
                            combat:FindFirstChild("nowalk"):Destroy()
                        end
                        if combat:FindFirstChild("nomove") then
                            combat:FindFirstChild("nomove"):Destroy()
                        end
                        combat.charge.Value = false
                        combat.bind.Value = false
                        combat.grip.Value = false
                    end
                end)
            end)
        end

        local function tpquesttarg()
            pcall(function()
                local target = game.Players.LocalPlayer.PlayerGui.Target.Adornee 
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = target.CFrame
            end)
        end

        local function disableMovementCooldowns()
            pcall(function()
                spawn(function()
                    while game.Players.LocalPlayer.Character do
                        game:GetService'RunService'.RenderStepped:Wait()
                        local chr = game.Players.LocalPlayer.Character
                        local combat = chr.combat 
                        combat.disable.Value = false
                        combat.canrun.Value = false
                        combat.combat.delayfront.Value = false
                        if combat:FindFirstChild("landed") then
                            combat:FindFirstChild("landed"):Destroy()
                        end
                        if combat:FindFirstChild("attacked") then
                            combat:FindFirstChild("attacked"):Destroy()
                        end
                        if combat:FindFirstChild("slowdown") then
                            combat:FindFirstChild("slowdown"):Destroy()
                        end
                        if combat:FindFirstChild("nowalk") then
                            combat:FindFirstChild("nowalk"):Destroy()
                        end
                        if combat:FindFirstChild("nomove") then
                            combat:FindFirstChild("nomove"):Destroy()
                        end
                        combat.charge.Value = false
                        combat.bind.Value = false
                        combat.grip.Value = false
                    end
                end)
            end)
        end

        function createWarPubs(Place)
            Save1()
            local url = 'https://games.roblox.com/v1/games/%s/servers/public?cursor=%s'
            local cursor = ""

            game.StarterGui:SetCore("SendNotification", {
                Title = "Server-Hopper"; 
                Text = "Attempting to hop servers..";
                Duration = 5; 
            })

            local hasTried = false
            
            while wait(0.1) do
                local response = game:HttpGet(url:format(Place, cursor))
                local decoded = HttpService:JSONDecode(response)
                
                for i, server in next, decoded.data do
                    if server.playing < server.maxPlayers then
                        settings.spawnSets.cachedServers[server.id] = true
                        wait()
                        savedsettings:save("SL2", settings)
                        wait()
                        if not hasTried then 
                            hasTried = true
                            game.StarterGui:SetCore("SendNotification", {
                                Title = "Server-Hopper"; 
                                Text = "Teleporting!";
                                Duration = 5; 
                            })
                        end
                        game:GetService'TeleportService':TeleportToPlaceInstance(Place, server.id, game.Players.LocalPlayer)
                        wait(9e9)
                    end
                end
                
                if not decoded.nextPageCursor then
                    break
                end

                cursor = decoded.nextPageCursor;
            end
        end

        local canspin = true
        local spins = game.Players.LocalPlayer.statz.spins
        local amountSpun = 0
        local lastNumSpins = spins.Value
        local function spinUntil()
            canspin = false
            canspin = true
            local foundkg1 = false
            local foundkg2 = false
            local foundkg3 = false
            local foundkg3 = false
            repeat wait(0.1)
                if canspin then
                    for slot, v in pairs(settings.kgsroll) do
                        if v then
                            local currentKG = game.Players.LocalPlayer.statz.main[slot]
                            if settings.kgspicked[currentKG.Value] then
                                canspin = false
                                return
                            elseif amountSpun < settings.resetAfterSpinAmount and settings.resetAfterSpin or settings.resetAfterSpin == false then
                                game:GetService("Players").LocalPlayer.startevent:FireServer("spin", slot)
                                wait()
                            end
                        end
                    end
                end

            until
                game.Players.LocalPlayer.statz.spins.Value == 0 or canspin == false or (settings.resetAfterSpin and amountSpun >= settings.resetAfterSpinAmount)

            canspin = true
        end

        game.Players.PlayerAdded:Connect(function(Player)
            if (settings.staffdetecs.inctest and Player:GetRoleInGroup(1226491) == "[SL2] Tester") or Player:GetRoleInGroup(1226491):find("NvM") or Player:GetRoleInGroup(1226491):find("The Man") or Player:GetRoleInGroup(1226491):find("Creators") or Player.Name == "RELLhub" then
                if settings.staffdetecs.skick then
                    savedsettings:save("SL2", settings)
                    game.Players.LocalPlayer:Kick("User "..Player.Name.." has joined. | Rank: ".. Player:GetRoleInGroup(1226491))
                end
                if settings.staffdetecs.notif then
                    game.StarterGui:SetCore("SendNotification", {
                        Title = "RELL Staff Detected"; 
                        Text = "User "..Player.Name.." has joined. | Rank: ".. Player:GetRoleInGroup(1226491);
                        Duration = 5; 
                    })
                end
            end
        end)

        local main = library:createWindow("not hattori")
        local tab1 = main:newTab("Main")

        tab1:button("Copy Discord Invite", function()
            write_clipboard("https://discord.gg/hattori")
        end)

        local VirtualUser = game:service'VirtualUser'
        game:service'Players'.LocalPlayer.Idled:connect(function()
            if settings.AntiAfk then
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
            end
        end)

        tab1:toggle("Anti-AFK", {
            location = nil;
            flag = "AntiAfk";
            default = settings.AntiAfk;
        }, false, {}, function(state) 
            settings.AntiAfk = state

            savedsettings:save("SL2", settings)
        end)

        tab1:toggle("Autofarm", {
            location = nil;
            flag = "autofarm_Enabled";
            default = settings.autofarm_Enabled;
        }, false, {}, function(state) 
            settings.autofarm_Enabled = state
            settings.shouldNoClip = state

            savedsettings:save("SL2", settings)
        end)

        tab1:toggle("Include Companion Missions", {
            location = nil;
            flag = "bossOnly";
            default = settings.bossOnly;
        }, false, {}, function(state) 
            settings.bossOnly = state

            savedsettings:save("SL2", settings)
        end)

        tab1:toggle("Rejoin/All quests completed", {
            location = nil;
            flag = "rejoinAfterAllQuests";
            default = settings.rejoinAfterAllQuests;
        }, false, {}, function(state) 
            settings.rejoinAfterAllQuests = state

            savedsettings:save("SL2", settings)
        end)

        tab1:toggle("Scroll Sniper", {
            location = nil;
            flag = "sniper_Enabled";
            default = settings.sniper_Enabled;
        }, false, {}, function(state) 
            settings.sniper_Enabled = state

            savedsettings:save("SL2", settings)
        end)

        tab1:toggle("Autokill Jins", {
            location = nil;
            flag = "autokill_Jins";
            default = settings.autokill_Jins;
        }, false, {}, function(state) 
            settings.autokill_Jins = state

            savedsettings:save("SL2", settings)
        end)

        tab1:button("Anti-grip", antigrip)

        tab1:button("Tp to quest target", tpquesttarg)


        local tab2 = main:newTab("War mode")

        tab2:toggle("Killaura", {
            location = nil;
            flag = "killaura_Enabled2";
            default = settings.killaura_Enabled2;
        }, false, {}, function(state) 
            settings.killaura_Enabled2 = state

            savedsettings:save("SL2", settings)
        end)

        tab2:slider("Range", {
            location = nil;
            flag = "killauraRange";
            min = 30;
            max = 30000;
            default = settings.killauraRange;
        }, function(v) settings.killauraRange = v savedsettings:save("SL2", settings) end, false, {})

        tab2:slider("Time before kill", {
            location = nil;
            flag = "waitTimeKillaura";
            min = 0;
            max = 5;
            default = settings.waitTimeKillaura;
        }, function(v) settings.waitTimeKillaura = v savedsettings:save("SL2", settings) end, false, {})


        local labelx = tab2:label("Current Round", "Current Round: 0")
        spawn(function()
            if _G.HopUntilRound then
                local curRound = workspace.warserver.round.Value
                if not (curRound >= _G.HopUntilRound and curRound < 21) then
                    codeWhenHopping = "_G.HopUntilRound = "..tostring(_G.HopUntilRound).."\n_G.UntilBossSpawns = "..tostring(_G.UntilBossSpawns).."\n"..codeWhenHopping
                    settings.spawnSets.cachedServers[game.JobId] = true
                    savedsettings:save("SL2", settings)
                    hasCalled = true
                    syn.queue_on_teleport(codeWhenHopping)
                    createWarPubs(5824792748)
                end
            end
        end)

        if workspace:FindFirstChild("warserver") then
            workspace.warserver.round.Changed:Connect(function()
                
                labelx:changeText("Current Round: "..tostring(workspace.warserver.round.Value))
                if settings.autoReset then
                    if workspace.warserver.round.Value >= settings.ResetAfter then
                        game.Players.LocalPlayer.Character:BreakJoints()
                    end
                end
                if _G.UntilBossSpawns then
                    if workspace.warserver.round.Value >= 22 then
                        if not foundBossScroll then
                            codeWhenHopping = "_G.HopUntilRound = "..tostring(_G.HopUntilRound).."\n_G.UntilBossSpawns = "..tostring(_G.UntilBossSpawns).."\n"..codeWhenHopping
                            settings.spawnSets.cachedServers[game.JobId] = true
                            savedsettings:save("SL2", settings)
                            hasCalled = true
                            syn.queue_on_teleport(codeWhenHopping)
                            createWarPubs(5824792748)
                        end
                    end
                end
            end)
        end

        tab2:slider("Auto-reset after round", {
            location = nil;
            flag = "ResetAfter";
            min = 1;
            max = 100;
            default = settings.ResetAfter;
        }, function(state) ResetAfter = state savedsettings:save("SL2", settings) end, true, {
            location = nil;
            flag = "autoReset";
            default = settings.autoReset;
            callback = function(state) autoReset = state savedsettings:save("SL2", settings) end;
        })

        tab2:button("Hop until round", function() 

            _G.HopUntilRound = untilRound
            _G.UntilBossSpawns = untilBossSpawns
            
            codeWhenHopping = "_G.HopUntilRound = "..tostring(_G.HopUntilRound).."\n_G.UntilBossSpawns = "..tostring(_G.UntilBossSpawns).."\n"..codeWhenHopping
            settings.spawnSets.cachedServers[game.JobId] = true
            savedsettings:save("SL2", settings)
            hasCalled = true
            syn.queue_on_teleport(codeWhenHopping)
            createWarPubs(5824792748)

        end)

        tab2:slider("Until Round", {
            location = nil;
            flag = "untilRound";
            min = 0;
            max = 20;
            default = settings.untilRound;
        }, function(v) settings.untilRound = v savedsettings:save("SL2", settings) end, false, {})


        tab2:toggle("Hop if no scroll spawns", {
            location = nil;
            flag = "untilBossSpawns";
            default = settings.untilBossSpawns;
        }, false, {}, function(state) 
            settings.untilBossSpawns = state

            savedsettings:save("SL2", settings)
        end)

        local tab3 = main:newTab("Spins")

        local cs = game.Players.LocalPlayer.statz:FindFirstChild("customsusanoo")
        if cs then
            local mainColor = cs.color
            local eyeColor = cs.eyecolor

            local labelx1 = tab3:label("Eye Color", "Eye Color").object
            local labelx22 = tab3:label("Main Color", "Main Color").object
            
            labelx1.border.frame.ImageColor3 = Color3.fromRGB(unpack(tostring(eyeColor.Value):split(",")))
            labelx22.border.frame.ImageColor3 = Color3.fromRGB(unpack(tostring(mainColor.Value):split(",")))

            local function randomizeEyeColor()
                game:GetService("Players").LocalPlayer.startevent:FireServer("csusanoo", "eyecolor")

                --labelx1.Text = "Eye Color: " ..tostring(BrickColor.new(r1,g1,b1))
                --labelx2.Text = "Main Color: " ..tostring(BrickColor.new(r3,g3,b3))

                labelx1.Parent.ImageColor3 = Color3.fromRGB(unpack(tostring(eyeColor.Value):split(",")))
            end
            
            local function randomizeMainColor()
                game:GetService("Players").LocalPlayer.startevent:FireServer("csusanoo", "color")

                --labelx22.Text = "Main Color: " ..tostring(BrickColor.new(r3,g3,b3))

                labelx22.Parent.ImageColor3 = Color3.fromRGB(unpack(tostring(mainColor.Value):split(",")))
            end

            tab3:button("Spin Susanoo EyeColor", randomizeEyeColor)

            tab3:button("Spin Susanoo MainColor", randomizeMainColor)
        end

        local labelx111 = tab3:label("Current Spins", "Current Spins: "..tostring(game.Players.LocalPlayer.statz.spins.Value))


        tab3:dropdown("Select KG slot", true, {
            location = settings.kgsroll;
            list = {
                {
                    Name = "Slot 1";
                    flag = "kg1";
                };
                {
                    Name = "Slot 2";
                    flag = "kg2";
                };
                {
                    Name = "Slot 3";
                    flag = "kg3";
                };
                {
                    Name = "Slot 4";
                    flag = "kg4";
                };
            };
            default = "Select KG slot";
        }, function(v) 
            savedsettings:save("SL2", settings)
        end)

        local kglist = {
            {
                Name = "Sharingan";
                flag = 'sharingan';
            };
            {
                Name = "Boil";
                flag = 'boil';
            };
            {
                Name = "Crystal";
                flag = 'crystal';
            };
            {
                Name = "Dust";
                flag = 'dust';
            };
            {
                Name = "Explosion";
                flag = 'explosion';
            };
            {
                Name = "Sand";
                flag = 'sand';
            };
            {
                Name = "Ice";
                flag = 'ice';
            };
            {
                Name = "Golddust";
                flag = 'golddust';
            };
            {
                Name = "Scorch";
                flag = 'scorch';
            };
            {
                Name = "Lava";
                flag = 'lava';
            };
            {
                Name = "Ironsand";
                flag = 'ironsand';
            };
            {
                Name = "Wood";
                flag = 'wood';
            };
            {
                Name = "Mud";
                flag = 'mud';
            };
            {
                Name = "Storm";
                flag = 'storm';
            };
            {
                Name = "Byakugan";
                flag = 'byakugan';
            };
            {
                Name = "Ketsuryugan";
                flag = 'ketsuryugan';
            };
            {
                Name = "Kaguya";
                flag = 'kaguya';
            };
            {
                Name = "Namikaze";
                flag = 'namikaze';
            };
            {
                Name = "Sarutobi";
                flag = 'sarutobi';
            };
            {
                Name = "Uzumaki";
                flag = 'uzumaki';
            };
            {
                Name = "Shirogane";
                flag = 'shirogane';
            };
            {
                Name = "Nara";
                flag = 'nara';
            };
            {
                Name = "Hoshigaki";
                flag = 'hoshigaki';
            };
            {
                Name = "Senjuwood";
                flag = 'senjuwood';
            };
            {
                Name = "Yukiice";
                flag = 'yukiice';
            };
            {
                Name = "Kamizuru";
                flag = 'kamizuru';
            };
            {
                Name = "Rinnegan";
                flag = 'rinnegan';
            };
            {
                Name = "Blacklightning";
                flag = 'blacklightning';
            };
            {
                Name = "Clay";
                flag = 'clay';
            };
            {
                Name = "Itachi Sharingan";
                flag = 'itachisharingan';
            };
            {
                Name = "Obito Sharingan";
                flag = 'obitosharingan';
            };
            {
                Name = "Inuzuka";
                flag = 'inuzuka';
            };
            {
                Name = "Jashin";
                flag = 'jashin';
            };
            {
                Name = "Paper";
                flag = 'paper';
            };
            {
                Name = "Akimichi";
                flag = 'akimichi';
            };
        };

        for i,v in pairs(kglist) do
            v.Name = game.ReplicatedStorage.alljutsu:WaitForChild(v.flag, 99):FindFirstChild("REALNAME").Value 
        end
        
        tab3:dropdown("Select KG", true, {
            location = settings.kgspicked;
            list = kglist;
            default = "Select KG";
        }, function(v) 
            savedsettings:save("SL2", settings) 
        end)

        tab3:button("Spin for KG", spinUntil)

        tab3:slider("Reset Save after #spins", {
            location = nil;
            flag = "resetAfterSpinAmount";
            min = 1;
            max = 79;
            default = settings.resetAfterSpinAmount;
        }, function(state) settings.resetAfterSpinAmount = state savedsettings:save("SL2", settings) end, true, {
            location = nil;
            flag = "resetAfterSpin";
            default = settings.resetAfterSpin;
            callback = function(state) settings.resetAfterSpin = state savedsettings:save("SL2", settings) end;
        })

        spins.Changed:Connect(function()
            labelx111:changeText("Current Spins: "..tostring(spins.Value))
            if spins.Value < lastNumSpins then
                lastNumSpins = spins.Value
                amountSpun = amountSpun + 1
                if settings.resetAfterSpin then
                    if amountSpun >= settings.resetAfterSpinAmount then
                        game.Players.LocalPlayer.statz:ClearAllChildren()
                        game:service'TeleportService':Teleport(game.PlaceId);
                    end
                end
            end
        end)

        tab3:button("Reset to last save", function()
            pcall(function()
                game.Players.LocalPlayer.statz:ClearAllChildren()
                game:service'TeleportService':Teleport(game.PlaceId);
            end)
        end)

        local tab4 = main:newTab("Character")

        --tab4:button("Hide name", hideName)

        --tab4:button("Show name", showName)

        tab4:slider("Run speed modifier", {
            location = nil;
            flag = "runSpeed";
            min = 30;
            max = 100;
            default = settings.runSpeed;
        }, function(state) runSpeed = state end, true, {
            location = nil;
            flag = "runspdMod";
            default = settings.runspdMod;
            callback = function(state) runspdMod = state end;
        })

        tab4:button("Infinite Mode", function()
            pcall(function()
                local currentmode = game.Players.LocalPlayer.Character.combat.KG.currentmode 
                if currentmode.Value ~= "" or currentmode.Parent.currentkg.Value ~= "" then
                    local c = game.Players.LocalPlayer.Character.combat.mode
                    local s = c:Clone()
                    s.Parent = c.Parent
                    c:Destroy()
                end
            end)
        end)

        tab4:button("No movement cooldown", disableMovementCooldowns)

        tab4:button("Godmode", godmode)

        local tab5 = main:newTab("Misc")

        tab5:button("Rejoin Server", rejoinServer)

        tab5:toggle("Auto-prestige", {
            location = nil;
            flag = "autoPrestige";
            default = settings.autoPrestige;
        }, false, {}, function(state) 
            settings.autoPrestige = state

            savedsettings:save("SL2", settings)
        end)

        tab5:toggle("Silent Aim", {
            location = nil;
            flag = "autoaim_Projectiles";
            default = settings.autoaim_Projectiles;
        }, false, {}, function(state) 
            settings.autoaim_Projectiles = state
        end)

        tab5:dropdown("Staff Join Detection", true, {
            location = settings.staffdetecs;
            list = {
                {
                    Name = "Notification";
                    flag = "notif";
                };
                {
                    Name = "Self-Kick";
                    flag = "skick";
                };
                {
                    Name = "Include Testers";
                    flag = "inctest";
                };
            };
            default = "Staff Join Detection";
        }, function(v) 
            savedsettings:save("SL2", settings)
        end)
        --[[
        tab5:toggle("Candy Autofarm", {
            location = nil;
            flag = "autofarmCandy_Enabled";
            default = settings.autofarmCandy_Enabled;
        }, false, {}, function(state) 
            settings.autofarmCandy_Enabled = state

            savedsettings:save("SL2", settings)
        end)

        tab5:slider("Serverhop-no candy spawned (secs)", {
            location = nil;
            flag = "timerMaxForCandy";
            min = 5;
            max = 60;
            default = settings.timerMaxForCandy;
        }, function(state) settings.timerMaxForCandy = state end, true, {
            location = nil;
            flag = "newServerAfterTimer";
            default = settings.newServerAfterTimer;
            callback = function(state) settings.newServerAfterTimer = state end;
        })
        ]]
        local tab6 = main:newTab("Private Hop")

        tab6:dropdown("Select Village", false, {
            location = nil;
            flag = "SelectedVillage";
            list = {
                {Name = "Leaf";};
                {Name = "Rock";};
                {Name = "Cloud";};
                {Name = "Mist";};
                {Name = "Sand";};
                {Name = "TrainingGrounds";};
                {Name = "ForestOfDeath";};
                {Name = "Rain";};
                {Name = "Akatsuki";};
            };
            default = settings.spawnSets.SelectedVillage;
        }, function(v) 
            settings.spawnSets.SelectedVillage = (v) 

            savedsettings:save("SL2", settings)
        end)

        tab6:button("Hop Private Servers", ps_Hop)
        --[[
        tab6:toggle("Stop when scroll found", {
            location = nil;
            flag = "PubCodeHop";
            default = settings.StopWhenScroll;
        }, false, {}, function(state) 
            settings.StopWhenScroll = state

            savedsettings:save("SL2", settings)
        end)
        ]]
        tab6:toggle("Use a code to hop", {
            location = nil;
            flag = "PubCodeHop";
            default = _G.PubCodeHop;
        }, false, {}, function(state) 
            _G.PubCodeHop = state

            savedsettings:save("SL2", settings)
        end)

        tab6:textbox("Input Code", {}, function(stat)
            _G.PubCodeHopCode = stat

            savedsettings:save("SL2", settings)
        end)

        tab6:dropdown("Hop Until", true, {
            location = settings.spawnSets;
            list = {
                {
                    Name = "Jin Spawns";
                    flag = "JinSpawn";
                };
                {
                    Name = "Weapon Spawns";
                    flag = "WeaponSpawn";
                };
                {
                    Name = "Mode Spawns";
                    flag = "ModeSpawn";
                };
                {
                    Name = "Sub Spawns";
                    flag = "SubSpawn";
                };
            };
            default = "Hop Until";
        }, function(isToggled, name) 
            savedsettings:save("SL2", settings)
        end)

        local tab7 = main:newTab("Public Hop")

        tab7:button("Hop Public Servers", pub_Hop)

        tab7:toggle("Use alternative method", {
            location = nil;
            flag = "PublicHopMethod2";
            default = settings.PublicHopMethod2;
        }, false, {}, function(state) 
            settings.PublicHopMethod2 = state

            savedsettings:save("SL2", settings)
        end)

        tab7:dropdown("Select Village", false, {
            location = nil;
            flag = "SelectedVillage2";
            list = {
                {Name = "Leaf";};
                {Name = "Rock";};
                {Name = "Cloud";};
                {Name = "Mist";};
                {Name = "Sand";};
                {Name = "TrainingGrounds";};
                {Name = "ForestOfDeath";};
                {Name = "Rain";};
                {Name = "Akatsuki";};
            };
            default = settings.spawnSets.SelectedVillage;
        }, function(v) 
            settings.spawnSets.SelectedVillage = (v) 

            savedsettings:save("SL2", settings)
        end)

        tab7:dropdown("Hop Until", true, {
            location = settings.spawnSets;
            list = {
                {
                    Name = "Jin Spawns";
                    flag = "JinSpawn";
                };
                {
                    Name = "Weapon Spawns";
                    flag = "WeaponSpawn";
                };
                {
                    Name = "Mode Spawns";
                    flag = "ModeSpawn";
                };
                {
                    Name = "Sub Spawns";
                    flag = "SubSpawn";
                };
            };
            default = "Hop Until";
        }, function(isToggled, name) 
            savedsettings:save("SL2", settings)
        end)
        function len(tab)
            local sum = 0
            for _, v in pairs(tab) do
                sum = sum + 1
            end
            return sum
        end
        local labelx1 = tab7:label("Cached Servers", "Cached Servers: "..tostring(len(settings.spawnSets.cachedServers)))
        tab7:button("Clear Cache", function()
            settings.spawnSets.cachedServers = {}
            savedsettings:save("SL2", settings)
            labelx1:changeText("Cached Servers: "..tostring(len(settings.spawnSets.cachedServers)))
        end)

        --local s = library:notify("Test Title", "Test 2 aaaaa", 15)

        tab1.spFuncs:SimClck()
    end
end
